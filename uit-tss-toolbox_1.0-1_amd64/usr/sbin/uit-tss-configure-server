#!/bin/bash

INTERFACES=$(cat /proc/net/dev | grep -oP '.*:\ ' | sed 's/://g' | sed 's/[[:space:]]//g')
LANIP='10.0.0.1'
LANSUBNET='24'

function initialize {
    clear
    echo ""
    echo "Initializing UIT-TSS-CONFIGURE-SERVER by Cameron Raschke"
    echo ""

    read -p "Press Enter to continue...."

    echo ""
    echo "Setting all interfaces down"
    for i in $INTERFACES; do
    ip link set down $i
    done

    echo ""
    echo "Flushing all IP addresses"
    for i in $INTERFACES; do
    ip addr flush dev $i
    done

    echo ""
    echo "Removing all interfaces from bonds and bridges"
    for i in $INTERFACES; do
    ip link set dev $i nomaster
    done

    echo ""
    echo "Flushing all routes"
    ip route flush table main
}

function intro {
	clear
	echo ""
	echo "Welcome to UIT-TSS-CONFIGURE-SERVER by Cameron Raschke."
	echo ""
	echo "Press CTRL + C at any time to exit"
	echo ""
	echo ""
	echo ""
	echo "| |    | |  | |     | |"
	echo "| |    | |  | |_____| |"
	echo "| |    | |  | |_____| |"
	echo "| |____| |  | |     | |"
	echo "\________/  | |     | |"
	echo ""
	echo "------------------------------"
	echo ""
    echo "Checklist:
	-Physical connections
	   * Make sure the server has power and ethernet attached.
       * Make sure the server has two interfaces connected - one for WAN, one for LAN.
	-Storage
	   * Make sure the server has over 100GB of free storage on the root drive.
    -Data
       * Backup the images to the server once it has been configured."
	read -p "Press Enter to continue...."
	clear
}

function ifselect {
    echo "Which interface is your WAN port?"
    echo $INTERFACES

    echo "Which interface is your LAN port?"
    echo $INTERFACES
}

function ifconf {
    echo "Configuring networking"
}

funciton firewall {
cat <<'EOF' > /root/firewall.sh
iptables -P INPUT DROP
iptables -P FORWARD DROP
iptables -P OUTPUT DROP

iptables -t filter -A INPUT -i lo -j ACCEPT
iptables -t filter -A FORWARD -i lo -j ACCEPT
iptables -t filter -A FORWARD -o lo -j ACCEPT
iptables -t filter -A OUTPUT -o lo -j ACCEPT

iptables -t filter -A INPUT -i $LANIF -j ACCEPT
iptables -t filter -A OUTPUT -o $LANIF -j ACCEPT

iptables -t filter -A INPUT -i $WANIF -p udp --sport 53 -j ACCEPT
iptables -t filter -A INPUT -i $WANIF -p tcp --sport 80 -j ACCEPT
iptables -t filter -A INPUT -i $WANIF -p tcp --sport 443 -j ACCEPT
iptables -t filter -A INPUT -i $WANIF -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
iptables -t filter -A INPUT -i $WANIF -j DROP

iptables -t filter -A OUTPUT -o $WANIF -p udp --dport 53 -j ACCEPT
iptables -t filter -A OUTPUT -o $WANIF -p tcp --dport 80 -j ACCEPT
iptables -t filter -A OUTPUT -o $WANIF -p tcp --dport 443 -j ACCEPT
iptables -t filter -A OUTPUT -o $WANIF -j DROP

EOF

    chown root:root /root/firewall.sh
    chmod 700 /root/firewall.sh
    /root/firewall.sh
}

function accounts {
    echo -e 'UHouston!\nUHouston!\n' | passwd root
    echo -e 'UHouston!\nUHouston!\n' | passwd cameron
    echo -e "M0rk0cameron\!\nM0rk0cameron\!\n" | smbpasswd -a cameron
}

function hostname {
    hostnamectl set-hostname UIT-TSS-LAPTOP-SERVER
}

function crontab {
    echo -n "@reboot /root/firewall.sh" > /etc/cron.d/00-firewall
}

function pkginstall {
    echo "Updating and upgrading all packages...."
    apt update -y
    apt upgrade -y
    echo "Installing necessary packages...."
    apt install dnsmasq samba iftop iotop iptables chpasswd -y
}

function pkgconf {
    echo "Configuring Samba...."
cat <<'EOF' > /etc/samba/smb.conf
[global]
workgroup=WORKGROUP
server string = %h server (Samba, Ubuntu)
interfaces = ${LANIP}/${LANSUBNET} $LANIF
bind interfaces only = yes
log file = /var/log/samba/log.%m
max log size = 1000
logging = file
panic action = /usr/share/samba/panic-action %d
server role = standalone server
obey pam restrictions = yes
unix password sync = yes
passwd program = /usr/bin/passwd %u
passwd chat = *Enter\snew\s*\spassword:* %n\n *Retype\snew\s*\spassword:* %n\n *password\supdated\ssuccessfully* .
pam password change = yes
map to guest = bad user
usershare allow guests = no

[dell]
path = /home/dell
read only = no
browsable = yes

[hp]
path = /home/hp
read only = no
browsable = yes

[desktops]
path = /home/desktops
read only = no
browsable = yes
EOF

    mkdir /home/dell
    mkdir /home/desktops
    mkdir /home/hp

    chown cameron:cameron /home/dell -R
    chown cameron:cameron /home/desktops -R
    chown cameron:cameron /home/hp -R

    echo "Configuring SSH...."
}

function pkgrestart {
    echo "Applying all package changes...."
    systemctl restart nmbd smbd sshd
}

function writescripts {

}

function terminate {
    read -p "Press Enter to reboot...."
    reboot
}