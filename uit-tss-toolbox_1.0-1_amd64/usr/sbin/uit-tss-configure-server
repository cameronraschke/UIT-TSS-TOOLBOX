#!/bin/bash

INTERFACES=$(cat /proc/net/dev | grep -oP '.*:\ ' | sed 's/://g' | sed 's/[[:space:]]//g')
LANIP='10.0.0.1'
LANSUBNET='24'

function initialize {
    clear
    echo ""
    echo "Initializing UIT-TSS-CONFIGURE-SERVER by Cameron Raschke"
    echo ""

    read -p "Press Enter to continue...."

    echo ""
    echo "Setting all interfaces down"
    for i in $INTERFACES; do
    ip link set down $i
    done

    echo ""
    echo "Flushing all IP addresses"
    for i in $INTERFACES; do
    ip addr flush dev $i
    done

    echo ""
    echo "Removing all interfaces from bonds and bridges"
    for i in $INTERFACES; do
    ip link set dev $i nomaster
    done

    echo ""
    echo "Flushing all routes"
    ip route flush table main
}

function intro {
	clear
	echo ""
	echo "Welcome to UIT-TSS-CONFIGURE-SERVER by Cameron Raschke."
	echo ""
	echo "Press CTRL + C at any time to exit"
	echo ""
	echo ""
	echo ""
	echo "| |    | |  | |     | |"
	echo "| |    | |  | |_____| |"
	echo "| |    | |  | |_____| |"
	echo "| |____| |  | |     | |"
	echo "\________/  | |     | |"
	echo ""
	echo "------------------------------"
	echo ""
    echo "Checklist:
	-Physical connections
	   * Make sure the server has power and ethernet attached.
       * Make sure the server has two interfaces connected - one for WAN, one for LAN.
	-Storage
	   * Make sure the server has over 100GB of free storage on the root drive.
    -Data
       * Backup the images to the server once it has been configured."
	read -p "Press Enter to continue...."
	clear
}

function ifselect {
    echo "Which interface is your WAN port?"
    echo $INTERFACES

    echo "Which interface is your LAN port?"
    echo $INTERFACES
}

function ifconf {
    echo "Configuring networking"
}

funciton firewall {
cat <<'EOF' > /root/firewall.sh
iptables -P INPUT DROP
iptables -P FORWARD DROP
iptables -P OUTPUT DROP

iptables -t filter -A INPUT -i lo -j ACCEPT
iptables -t filter -A FORWARD -i lo -j ACCEPT
iptables -t filter -A FORWARD -o lo -j ACCEPT
iptables -t filter -A OUTPUT -o lo -j ACCEPT

iptables -t filter -A INPUT -i $LANIF -j ACCEPT
iptables -t filter -A OUTPUT -o $LANIF -j ACCEPT

iptables -t filter -A INPUT -i $WANIF -p udp --sport 53 -j ACCEPT
iptables -t filter -A INPUT -i $WANIF -p tcp --sport 80 -j ACCEPT
iptables -t filter -A INPUT -i $WANIF -p tcp --sport 443 -j ACCEPT
iptables -t filter -A INPUT -i $WANIF -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
iptables -t filter -A INPUT -i $WANIF -j DROP

iptables -t filter -A OUTPUT -o $WANIF -p udp --dport 53 -j ACCEPT
iptables -t filter -A OUTPUT -o $WANIF -p tcp --dport 80 -j ACCEPT
iptables -t filter -A OUTPUT -o $WANIF -p tcp --dport 443 -j ACCEPT
iptables -t filter -A OUTPUT -o $WANIF -j DROP

EOF

    chown root:root /root/firewall.sh
    chmod 700 /root/firewall.sh
    /root/firewall.sh
}

function unixaccounts {
    echo -e 'UHouston!\nUHouston!\n' | passwd root
    echo -e 'UHouston!\nUHouston!\n' | passwd cameron

}

function hostname {
    hostnamectl set-hostname UIT-TSS-LAPTOP-SERVER
}

function crontab {
    echo -n "@reboot /root/firewall.sh" > /etc/cron.d/00-firewall
}

function pkginstall {
    echo "Updating and upgrading all packages...."
    apt update -y
    apt upgrade -y
    echo "Installing necessary packages...."
    apt install dnsmasq samba iftop iotop iptables chpasswd -y
    echo "Enabling new packages...."
    systemctl enable nmbd smbd dnsmasq
    systemctl stop dnsmasq
}

function pkgconf {
    echo "Configuring Samba...."
cat <<'EOF' > /etc/samba/smb.conf
[global]
workgroup = WORKGROUP
server string = Samba Server
interfaces = ${LANIP}/${LANSUBNET} ${LANIF}
socket address = ${LANIP}
bind interfaces only = yes
log file = /var/log/samba/log.%m
max log size = 50
logging = file
panic action = /usr/share/samba/panic-action %d
server role = standalone server
obey pam restrictions = yes
unix password sync = yes
passwd program = /usr/bin/passwd %u
passwd chat = *Enter\snew\s*\spassword:* %n\n *Retype\snew\s*\spassword:* %n\n *password\supdated\ssuccessfully* .
pam password change = yes
map to guest = bad user
usershare allow guests = no

[dell]
path = /home/dell
read only = no
browsable = yes

[hp]
path = /home/hp
read only = no
browsable = yes

[desktops]
path = /home/desktops
read only = no
browsable = yes
EOF

    echo -e 'UHouston!\nUHouston!\n' | smbpasswd -a cameron

    mkdir /home/dell
    mkdir /home/desktops
    mkdir /home/hp

    chown cameron:cameron /home/dell -R
    chown cameron:cameron /home/desktops -R
    chown cameron:cameron /home/hp -R

    echo "Configuring SSH...."
    sed -i 's/#ListenAddress 0.0.0.0/ListenAddress 10.0.0.1/g' /etc/ssh/sshd_config
    sed -i 's/#AddressFamily any/AddressFamily inet/g' /etc/ssh/sshd_config

    echo "Configuring dnsmasq...."
cat <<'EOF' > /etc/dnsmasq.conf
port=53
no-resolv
listen-address=${LANIP}
bogus-priv
strict-order
interface=${LANIF}
bind-interfaces

dhcp-option=1,255.255.255.0
dhcp-option=6,10.0.0.1
dhcp-option=15,.uit
dhcp-range=10.0.0.5,10.0.0.254,255.255.255.0,2m
dhcp-sequential-ip
EOF   

apt autoremove -y
}

function pkgrestart {
    echo "Applying all package changes...."
    systemctl restart nmbd smbd ssh dnsmasq
}

function writescripts {
echo "Creating SMB Status script"
echo "watch -n 0.5 'smbstatus --verbose'" > /root/smbstatus.sh
chown root:root /root/smbstatus.sh
chmod 700 /root/smbstatus.sh
}

function kubernetes {
    CTRNAME='uit-tss-laptop-server'

    swapoff -a

    modprobe overlay
    modprobe br_netfilter

cat <<'EOF' > /etc/sysctl.d/kubernetes.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF

    sysctl --system

    apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates

    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg

    yes | add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

    apt update -y

    apt install -y containerd.io
    containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
    sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
    systemctl restart containerd
    systemctl enable containerd

    apt install ipvsadm -y

    curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
    echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
    apt update -y
    apt install -y kubelet kubeadm kubectl
    apt-mark hold kubelet kubeadm kubectl
    

    kubectl drain ${K8SNODE} --delete-emptydir-data --force --ignore-daemonsets

    kubeadm reset

    systemctl restart kubelet

    rm -r $HOME/.kube/

    iptables -F && iptables -t nat -F && iptables -t mangle -F && iptables -X
    iptables-legacy -F && iptables-legacy -t nat -F && iptables-legacy -t mangle -F && iptables-legacy -X

    ipvsadm --clear

    kubectl delete node ${K8SNODE}


    kubeadm init --control-plane-endpoint=${LANIP}

    mkdir -p $HOME/.kube
    cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    chown $(id -u):$(id -g) $HOME/.kube/config

    export KUBECONFIG=/etc/kubernetes/admin.conf

    kubectl taint nodes --all node-role.kubernetes.io/control-plane-

    kubectl cluster-info
    kubectl get nodes

    wget https://projectcalico.docs.tigera.io/manifests/calico.yaml --output-document /root/k8s/calico.yaml
    kubectl apply -f /root/k8s/calico.yaml
    kubectl get pods
    kubectl get nodes

    kubectl create namespace prod
    kubectl create namespace dev

    kubectl create deployment nginx-prod --image=nginx --replicas=4 --namespace prod
    kubectl get deployment nginx-prod --namespace prod

    kubectl expose deployment nginx-prod --port=80 --target-port 80 --type LoadBalancer --external-ip 10.0.0.2 --namespace prod
    kubectl get service nginx-prod --namespace prod

}

function terminate {
    read -p "Press Enter to reboot...."
    reboot
}

