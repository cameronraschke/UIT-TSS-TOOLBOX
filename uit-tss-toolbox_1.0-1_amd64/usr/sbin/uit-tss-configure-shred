#!/bin/bash

if [ ! -f /opt/live-build.deb ]; then
/usr/bin/apt purge live-build -y
/usr/bin/wget http://ftp.us.debian.org/debian/pool/main/l/live-build/live-build_20220505_all.deb \
	--output-document=/opt/debian-live.deb
/usr/bin/apt install /opt/debian-live.deb -y
fi

/usr/bin/apt install dosfstools -y

rm -r /opt/UIT-TSS-SHRED/
mkdir /opt/UIT-TSS-SHRED/

( cd /opt/UIT-TSS-SHRED/ && \

	lb clean && \

	/usr/bin/lb config \
		--apt apt \
		--apt-recommends true \
		--apt-secure true \
		--apt-source-archives true \
		--architecture amd64 \
		--archive-areas 'main' \
		--binary-filesystem fat32 \
		--binary-images iso-hybrid \
		--bootappend-live "boot=live live-media=removable toram username=root hostname=UIT-TSS-SHRED \
			timezone=America/Chicago" \
		--bootloaders "grub-efi syslinux" \
		--chroot-filesystem squashfs \
		--compression gzip \
		--clean \
		--debian-installer live \
		--debian-installer-distribution bullseye \
		--distribution bullseye \
		--debootstrap-options "--variant=minbase --arch=amd64" \
		--hdd-label UIT-TSS-SHRED \
		--image-name UIT-TSS-SHRED \
		--initramfs live-boot \
		--initsystem systemd \
		--iso-application UIT-TSS-SHRED \
		--iso-preparer "Cameron Raschke caraschke@uh.edu" \
		--iso-publisher "Cameron Raschke caraschke@uh.edu" \
		--iso-volume UIT-TSS-SHRED \
		--mode debian \
		--system live \
		--uefi-secure-boot enable \
		--updates true)

mkdir -p /opt/UIT-TSS-SHRED/config/bootloaders
cp -r /usr/share/live/build/bootloaders/isolinux /opt/UIT-TSS-SHRED/config/bootloaders
cp -r /usr/share/live/build/bootloaders/grub-pc /opt/UIT-TSS-SHRED/config/bootloaders

cat <<'EOF' > /opt/UIT-TSS-SHRED/config/bootloaders/isolinux/isolinux.cfg
UI vesamenu.c32

MENU TITLE Boot Menu
DEFAULT linux
        TIMEOUT 10
        MENU RESOLUTION 640 480
        SAY Now booting into UIT-TSS-SHRED by Cameron Raschke
label linux
        menu label UIT-TSS-SHRED by Cameron Raschke
        menu default
        linux /live/vmlinuz
        initrd /live/initrd.img
        append @APPEND_LIVE@
EOF

rm -r /opt/UIT-TSS-SHRED/config/bootloaders/grub-pc/*
cat <<'EOF' > /opt/UIT-TSS-SHRED/config/bootloaders/grub-pc/grub.cfg
insmod part_gpt
insmod part_msdos
insmod fat
insmod iso9660
insmod gfxterm

set gfxmode=800x600
terminal_output gfxterm

set default="0"
set timeout=0
set timeout_style=hidden

menuentry "UIT-TSS-SHRED by Cameron Raschke" {
        linux @KERNEL_LIVE@ @APPEND_LIVE@
        initrd @INITRD_LIVE@
}
EOF

cat <<'EOF' > /opt/UIT-TSS-SHRED/config/package-lists/live.list.chroot
live-boot
live-config
live-config-systemd
systemd-sysv
openssl
less
nano
vim
cifs-utils
passwd
locales
firmware-linux-free
parted
gdisk
libasound2
libasound2-plugins
alsa-utils
sox
libsox-fmt-all
kbd
iptables
hdparm
util-linux
nvme-cli
procps
coreutils
pv
EOF

mkdir -p /opt/UIT-TSS-SHRED/config/includes.chroot/root/
cat <<'EOF' > /opt/UIT-TSS-SHRED/config/hooks/live/0100-uit-tss-toolbox-setup.hook.chroot

/usr/sbin/sysctl -w "net.ipv6.conf.all.disable_ipv6=1" &>/dev/null
/usr/sbin/sysctl -w "net.ipv6.conf.default.disable_ipv6=1" &>/dev/null
/usr/sbin/sysctl -w "net.ipv4.conf.default.rp_filter=2" &>/dev/null
/usr/sbin/sysctl -w "net.ipv4.conf.all.rp_filter=2" &>/dev/null
/usr/sbin/sysctl -w "net.ipv4.ip_forward=0" &>/dev/null
/usr/sbin/sysctl -w "net.ipv6.conf.all.forwarding=1" &>/dev/null
/usr/sbin/sysctl -w  "net.ipv6.conf.default.forwarding=1" &>/dev/null
/usr/sbin/sysctl -p &>/dev/null

/usr/sbin/sysctl -w "kernel.printk=2 4 1 2" &>/dev/null
/usr/sbin/sysctl -w "kernel.kptr_restrict=1" &>/dev/null
/usr/sbin/sysctl -w "vm.mmap_min_addr=65536" &>/dev/null
/usr/sbin/sysctl -p &>/dev/null

echo "UIT-TSS-SHRED" > /etc/hostname
echo -e "\nWelcome to UIT-TSS-SHRED by Cameron Raschke.\n" > /etc/motd
echo -e "\nWelcome to UIT-TSS-SHRED by Cameron Raschke.\n" > /etc/issue.net
echo -e "Banner /etc/issue.net" >> /etc/ssh/sshd_config

/usr/bin/apt purge iproute2 -y &>/dev/null
EOF

chmod 777 /opt/UIT-TSS-SHRED/config/hooks/live/0100-uit-tss-toolbox-setup.hook.chroot

mkdir -p /opt/UIT-TSS-SHRED/config/includes.chroot/root/
/usr/bin/wget https://soundboardguy.com/wp-content/uploads/2022/01/Oven-Timer-Ding.mp3 \
	--output-document=/opt/UIT-TSS-SHRED/config/includes.chroot/root/oven.mp3

mkdir -p /opt/UIT-TSS-SHRED/config/includes.chroot/root
touch /opt/UIT-TSS-SHRED/config/includes.chroot/root/.bash_profile
cat <<'EOF' > /opt/UIT-TSS-SHRED/config/includes.chroot/root/.bash_profile
#!/bin/bash

clear

echo ""
echo "Configuring Kernel..."
/usr/sbin/iptables -P INPUT DROP &>/dev/null
/usr/sbin/iptables -P FORWARD DROP &>/dev/null
/usr/sbin/iptables -P OUTPUT DROP &>/dev/null
/usr/sbin/sysctl -w "net.ipv6.conf.all.disable_ipv6=1" &>/dev/null
/usr/sbin/sysctl -w "net.ipv6.conf.default.disable_ipv6=1" &>/dev/null
/usr/sbin/sysctl -w "net.ipv4.conf.default.rp_filter=2" &>/dev/null
/usr/sbin/sysctl -w "net.ipv4.conf.all.rp_filter=2" &>/dev/null
/usr/sbin/sysctl -w "net.ipv4.ip_forward=0" &>/dev/null
/usr/sbin/sysctl -w "net.ipv6.conf.all.forwarding=1" &>/dev/null
/usr/sbin/sysctl -w  "net.ipv6.conf.default.forwarding=1" &>/dev/null
/usr/sbin/sysctl -w "kernel.printk=2 4 1 2" &>/dev/null
/usr/sbin/sysctl -w "kernel.kptr_restrict=1" &>/dev/null
/usr/sbin/sysctl -w "vm.mmap_min_addr=65536" &>/dev/null
/usr/sbin/sysctl -p &>/dev/null
echo "Done."
echo ""
 
echo "Configuring audio..."
/usr/bin/amixer sset Master 100% &>/dev/null
/usr/bin/amixer set Master unmute &>/dev/null
/usr/bin/amixer sset Speakers 100% &>/dev/null
/usr/sbin/amixer set Speakers unmute &>/dev/null
echo "Done."
echo ""

echo "Configuring font..."
/usr/bin/setfont /usr/share/consolefonts/Lat7-TerminusBold16.psf.gz
echo "Done."
echo ""

sleep 1

clear

CLIENTDISK=''
SSD_REGEX='sd.*'
NVME_REGEX='nvme.*'
SCSI_REGEX='hd.*'



function intro {
	clear
	echo ""
	echo -e "\nWelcome to UIT-TSS-SHRED by Cameron Raschke.\n"
	echo "Press CTRL + C at any time to exit"
	echo "If you have exited and want to restart UIT-TSS-SHRED, press CTRL + D"
	echo ""
	echo ""
echo '
| |    | |  | |     | |
| |    | |  | |_____| |
| |    | |  | |_____| |
| |____| |  | |     | |
\________/  | |     | |
'
	sleep 1
	echo ""
	echo "------------------------------"
	echo ""
echo 'Checklist:
	-Physical connections
	   * Make sure that power is plugged in to the client.
	   * Do not use UIT-TSS-SHRED on USB drives or drives connected over USB.
	-General best practices
	   * Sanitize laptops with cleaner before imaging them.
	   * Reset BIOS to default/factory settings before imaging.
	-Dells
	   * Make sure SATA mode is in AHCI mode and not RAID mode.
	      * This is usually under "System Configuration" or "Storage" in BIOS.
	      * Every Dell is in RAID mode by default. 
	      * If you reset BIOS, make sure you change SATA mode after the reset.
	      
	*** WARNING *** After pressing Enter, the system will enter hibernate mode.
	This is normal. Please wake up the system after it hibernates. *** WARNING ***
'
	read -p "Please remove the thumb drive and press Enter...."
	echo -n mem > /sys/power/state
	clear
}



function modeselect {
	echo ""
	echo "Choose a mode:"

	echo ""
	echo "1 Default 
	-Mixture of modes"

	echo ""
	echo "2 Zero Mode + Quick Verify
	-One pass of zeroes
	-Quick verification step"

	echo ""
	echo "3 Secure Erase
	-SATA/NVME Only
	-One pass, real-time verification"

	echo ""
	echo "4 DOD 5220.22-M/NCSC-TG-025/AFSSI-5020/HMG IS5
	-Writes a pass of zeroes, then ones, then a random bit
	-3 passes, 3 verifications"

	echo ""
	echo "5 RCMP TSSIT OPS-II/VSITR
	-Alternates passes between 0's and 1's 6 times
	-Writes random bit, verifies random bit"

	echo ""
	echo "6 Schneier
	-A pass of 1's then a pass of 0's
	-Five passes of a random stream of characters"

	echo ""
	echo "7 Gutmann
	-Four random character passes
	-27 predefined pattern passes
	-Four random character passes"

	echo ""
	read -n1 -p "Choose [1-7] " MODESELECT
	echo ""
	case $MODESELECT in
	1)
	MODE='default'
	RMODE='Default'
	;;
	2)
	MODE='zero'
	RMODE='Zero Mode'
	;;
	3)
	MODE='secureerase'
	RMODE='Secure Erase'
	;;
	4)
	MODE='dod'
	RMODE='DOD 5220.22-M/NCSC-TG-025/AFSSI-5020/HMG IS5'
	;;
	5)
	MODE='rcmp'
	RMODE='RCMP TSSIT OPS-II/VSITR'
	;;
	6)
	MODE='schneier'
	RMODE='Schneier Method'
	;;
	7)
	MODE='gutmann'
	RMODE='Gutmann Method'
	;;
	*)
	modeselect
	;;
	esac
}



function diskselect {
	DISKNAMES=$(lsblk --nodeps --noheadings -o NAME --exclude 1,2,7,11)
	clear
	echo ""
	echo "The mode is: ${RMODE}"
	echo ""
    echo "These are the current disks and their sizes:"
    echo "$(lsblk --nodeps --noheadings -o NAME,SIZE --exclude 1,2,7,11)"
    echo ""
    PS3="Select a drive: "
    select CLIENTDISK in ${DISKNAMES}
    do
        if [[ $CLIENTDISK =~ sd.* || $CLIENTDISK =~ nvme.* ]]; then
		echo ""
        echo "$(lsblk /dev/${CLIENTDISK} -o NAME,SIZE,TYPE,MOUNTPOINT)"
		echo ""
        echo "You chose ${CLIENTDISK}."
        read -p "Press Enter to confirm...."
        echo ""
        break
        else
		echo "Invalid block device selected."
		echo ""
		diskselect
        exit 1
        fi
    done
}



function default {
	clear
	echo ""
	echo "UIT-TSS-SHRED running in default mode."
	echo ""

	echo ""
	echo "[1/6] Destroying all GPT and MBR data...."
	sleep 1
	/usr/sbin/sgdisk --zap-all /dev/${CLIENTDISK} &>/dev/null

	echo ""
	echo "[2/6] Writing a stream of random characters to ${CLIENTDISK}...."
	sleep 1
	/usr/bin/pv < /dev/urandom > /dev/${CLIENTDISK}
	
	if [[ $CLIENTDISK =~ $SSD_REGEX ]]; then 
	echo ""
	echo "[3/6] Using Secure Erase on ${CLIENTDISK}. Please keep the device powered on."
	sleep 1
	/usr/sbin/hdparm --user-master u --security-set-pass UHouston /dev/${CLIENTDISK} &>/dev/null
	/usr/sbin/hdparm --user-master u --security-erase UHouston /dev/${CLIENTDISK} &>/dev/null
	fi
	
	if [[ $CLIENTDISK =~ $NVME_REGEX ]]; then
	echo ""
	echo "[3/6] Using Secure Erase on ${CLIENTDISK}. Please keep the device powered on."
	sleep 1
	/usr/sbin/nvme format /dev/${CLIENTDISK} --ses=1 --namespace-id=1 &>/dev/null
	/usr/sbin/nvme format /dev/${CLIENTDISK} --ses=2 --namespace-id=1 &>/dev/null
	fi

	if [[ $CLIENTDISK =~ $SCSI_REGEX ]]; then
	echo "[3/6] No SATA or NVME drive was selected, cannot use Secure Erase. Continuing...."
	fi

	echo ""
	echo "[4/6] Writing a stream of zeroes to ${CLIENTDISK}...."
	sleep 1
	/usr/bin/pv < /dev/zero > /dev/${CLIENTDISK}

	echo ""
	echo "[5/6] Discarding and deleting all sectors on ${CLIENTDISK}...."
	sleep 1
	/usr/sbin/blkdiscard /dev/${CLIENTDISK} &>/dev/null

	echo ""
	echo "[6/6] Verifying - searching all sectors on ${CLIENTDISK} for non-zero bits...."
	HEXVERIFY=$(/usr/bin/pv /dev/${CLIENTDISK} | grep -oP -m 1 '[^0]' | head -1)

	if [[ -z $HEXVERIFY ]]; then
        echo ""
	echo ""
        echo "Non-zero bits found on device ${CLIENTDISK}. Test has failed."
	else
        echo ""
	echo ""
		echo "The drive ${CLIENTDISK} is completely and securely wiped."
		echo "Test passed successfully!"
	fi
}



function zero {
	clear
	echo ""
	echo "UIT-TSS-SHRED running in zero mode."
	echo ""

	echo ""
	echo "[1/2] Using the Write Zero method on ${CLIENTDISK}...."
	sleep 1
	/usr/bin/pv < /dev/zero > /dev/${CLIENTDISK}
	
	echo ""
	echo "[2/2] Quickly verifying disk ${CLIENTDISK}...."
	
	DISKSIZEMB=$(( $(blockdev --getsize64 /dev/${CLIENTDISK}) / 1048576 ))
	DISKVERIFYSIZE=$(( ${DISKSIZEMB} / 10 ))
	
	DISKVERIFY1=$(/usr/bin/dd if=/dev/${CLIENTDISK} bs=1048576 count=100 &> /dev/null | grep -oP -m 1 [^0] | head -1)
	DISKVERIFY2=$(/usr/bin/dd if=/dev/${CLIENTDISK} bs=1048576 count=100 skip=$(( ${DISKVERIFYSIZE} * 1)) &> /dev/null | grep -oP -m 1 [^0] | head -1)
	DISKVERIFY3=$(/usr/bin/dd if=/dev/${CLIENTDISK} bs=1048576 count=100 skip=$(( ${DISKVERIFYSIZE} * 2)) &> /dev/null | grep -oP -m 1 [^0] | head -1)
	DISKVERIFY4=$(/usr/bin/dd if=/dev/${CLIENTDISK} bs=1048576 count=100 skip=$(( ${DISKVERIFYSIZE} * 3)) &> /dev/null | grep -oP -m 1 [^0] | head -1)
	DISKVERIFY5=$(/usr/bin/dd if=/dev/${CLIENTDISK} bs=1048576 count=100 skip=$(( ${DISKVERIFYSIZE} * 4)) &> /dev/null | grep -oP -m 1 [^0] | head -1)
	DISKVERIFY6=$(/usr/bin/dd if=/dev/${CLIENTDISK} bs=1048576 count=100 skip=$(( ${DISKVERIFYSIZE} * 5)) &> /dev/null | grep -oP -m 1 [^0] | head -1)
	DISKVERIFY7=$(/usr/bin/dd if=/dev/${CLIENTDISK} bs=1048576 count=100 skip=$(( ${DISKVERIFYSIZE} * 6)) &> /dev/null | grep -oP -m 1 [^0] | head -1)
	DISKVERIFY8=$(/usr/bin/dd if=/dev/${CLIENTDISK} bs=1048576 count=100 skip=$(( ${DISKVERIFYSIZE} * 7)) &> /dev/null | grep -oP -m 1 [^0] | head -1)
	DISKVERIFY9=$(/usr/bin/dd if=/dev/${CLIENTDISK} bs=1048576 count=100 skip=$(( ${DISKVERIFYSIZE} * 8)) &> /dev/null | grep -oP -m 1 [^0] | head -1)
	DISKVERIFY10=$(/usr/bin/dd if=/dev/${CLIENTDISK} bs=1048576 count=100 skip=$(( ${DISKVERIFYSIZE} * 9)) &> /dev/null | grep -oP -m 1 [^0] | head -1)
	DISKVERIFY=$DISKVERIFY1 && $DISKVERIFY2 && $DISKVERIFY3 && $DISKVERIFY4 && $DISKVERIFY5 && $DISKVERIFY6 && \
	$DISKVERIFY7 && $DISKVERIFY8 && $DISKVERIFY9 && $DISKVERIFY10
	
	if [[ ! -z $DISKVERIFY ]]; then
	echo ""
	echo ""
	echo "Verification test failed for drive ${CLIENTDISK}. Exiting...."
	else
	echo ""
	echo ""
	echo "The drive ${CLIENTDISK} is erased using the Write Zero method."
	fi
}



function secureerase {
	clear
	echo ""
	echo "UIT-TSS-SHRED running in Secure Erase mode."
	echo "Notice: This mode will only work on newer SATA/NVME drives."
	echo ""

	if [[ $CLIENTDISK =~ $SSD_REGEX ]]; then 
	echo ""
	echo "[1/1] Using Secure Erase on ${CLIENTDISK}. Please keep the device powered on."
	sleep 1
	/usr/sbin/hdparm --user-master u --security-set-pass UHouston /dev/${CLIENTDISK} &>/dev/null
	/usr/sbin/hdparm --user-master u --security-erase UHouston /dev/${CLIENTDISK} &>/dev/null
	fi
	
	if [[ $CLIENTDISK =~ $NVME_REGEX ]]; then
	echo ""
	echo "[1/1] Using Secure Erase on ${CLIENTDISK}. Please keep the device powered on."
	sleep 1
	/usr/sbin/nvme format /dev/${CLIENTDISK} --ses=1 --namespace-id=1 &>/dev/null
	/usr/sbin/nvme format /dev/${CLIENTDISK} --ses=2 --namespace-id=1 &>/dev/null
	fi

	if [[ $CLIENTDISK =~ $SCSI_REGEX ]]; then
	echo ""
	echo "[1/1] Error: No SATA or NVME drive was selected, cannot use Secure Erase. Please use another mode. Exiting...."
	exit 1
	fi

	echo ""
	echo ""
	echo "The drive ${CLIENTDISK} is erased using the Secure Erase method."
}



function dod {
	clear
	echo ""
	echo "UIT-TSS-SHRED running in DOD 5220.22-M mode."
	echo ""

	RANDOMBIT=$(cat /dev/urandom | xxd -plain | head -1 | cut -c 1)

	echo ""
	echo "[1/6] Writing a pass of 0's to ${CLIENTDISK}"
	pv < /dev/zero > /dev/${CLIENTDISK}
	echo ""
	echo "[2/6] Verifying disk ${CLIENTDISK} - checking for 0's...."
	ZEROVERIFY=$(/usr/bin/pv /dev/${CLIENTDISK} | grep -oP -m 1 '[^0]' &> /dev/null | head -1)
	if [[ ! -z $ZEROVERIFY ]]; then
        echo ""
        echo "Bits found on device ${CLIENTDISK} that weren't 0's. Test has failed."
		exit 1
	fi

	echo ""
	echo "[3/6] Writing a pass of 1's to ${CLIENTDISK}"
	/usr/bin/yes "1" | (pv > /dev/${CLIENTDISK})
	echo ""
	echo "[4/6] Verifying disk ${CLIENTDISK} - checking for 1's...."
	ONEVERIFY=$(/usr/bin/pv /dev/${CLIENTDISK} | grep -oP -m 1 '[^1]' &> /dev/null | head -1)
	if [[ ! -z $ONEVERIFY ]]; then
        echo ""
        echo "Bits found on device ${CLIENTDISK} that weren't 1's. Test has failed."
		exit 1
	fi

	echo ""
	echo "[5/6] Writing a pass of a random bit (${RANDOMBIT}) to ${CLIENTDISK}"
	/usr/bin/yes "${RANDOMBIT}" | (pv > /dev/${CLIENTDISK})
	echo ""
	echo "[6/6] Verifying disk ${CLIENTDISK} - checking for the random bit (${RANDOMBIT})...."
	RBITVERIFY=$(/usr/bin/pv /dev/${CLIENTDISK} | grep -oP -m 1 "[^${RANDOMBIT}]" &> /dev/null | head -1)
	if [[ ! -z $RBITVERIFY ]]; then
        echo ""
        echo "Bits found on device ${CLIENTDISK} that weren't ${RANDOMBIT}'s. Test has failed."
		exit 1
	fi

	if [[ ! -z $ZEROVERIFY && ! -z $ONEVERIFY && ! -z $RBITVERIFY ]]; then
        echo ""
		echo ""
        echo "Bad bits found on device ${CLIENTDISK}. Test has failed."
		exit 1
	else
        echo ""
		echo ""
		echo "The drive ${CLIENTDISK} is erased in accordance with DOD 5220.22-M."
	fi
}



function rcmp {
	clear
	echo ""
	echo "UIT-TSS-SHRED running in RCMP TSSIT OPS-II mode."
	echo ""

	RANDOMBIT=$(cat /dev/urandom | xxd -plain | head -1 | cut -c 1)

	echo ""
	echo "[1/8] Writing a pass of 0's to ${CLIENTDISK}"
	pv < /dev/zero > /dev/${CLIENTDISK}

	echo ""
	echo "[2/8] Writing a pass of 1's to ${CLIENTDISK}"
	/usr/bin/yes "1" | (pv > /dev/${CLIENTDISK})

	echo ""
	echo "[3/8] Writing a pass of 0's to ${CLIENTDISK}"
	pv < /dev/zero > /dev/${CLIENTDISK}

	echo ""
	echo "[4/8] Writing a pass of 1's to ${CLIENTDISK}"
	/usr/bin/yes "1" | (pv > /dev/${CLIENTDISK})

	echo ""
	echo "[5/8] Writing a pass of 0's to ${CLIENTDISK}"
	pv < /dev/zero > /dev/${CLIENTDISK}

	echo ""
	echo "[6/8] Writing a pass of 1's to ${CLIENTDISK}"
	/usr/bin/yes "1" | (pv > /dev/${CLIENTDISK})

	echo ""
	echo "[7/8] Writing a pass of a random bit (${RANDOMBIT}) to ${CLIENTDISK}"
	/usr/bin/yes "${RANDOMBIT}" | (pv > /dev/${CLIENTDISK})
	echo ""
	echo "[8/8] Verifying disk - checking ${CLIENTDISK} for the random bit (${RANDOMBIT})'s...."
	RBITVERIFY=$(/usr/bin/pv /dev/${CLIENTDISK} | grep -oP -m 1 "[^${RANDOMBIT}]" &> /dev/null | head -1)
	if [[ ! -z $RBITVERIFY ]]; then
        echo ""
		echo ""
        echo "Bits found on device ${CLIENTDISK} that weren't ${RANDOMBIT}'s. Test has failed."
		exit 1
	fi

	echo ""
	echo ""
	echo "The drive ${CLIENTDISK} is erased in accordance with RCMP TSSIT OPS-II."
}



function schneier {
	clear
	echo ""
	echo "UIT-TSS-SHRED running in Schneier mode."
	echo ""

	echo ""
	echo "[1/7] Writing a pass of 1's to ${CLIENTDISK}"
	/usr/bin/yes "1" | (pv > /dev/${CLIENTDISK})

	echo ""
	echo "[2/7] Writing a pass of 0's to ${CLIENTDISK}"
	pv < /dev/zero > /dev/${CLIENTDISK}

	echo ""
	echo "[3/7] Writing a stream of random characters to ${CLIENTDISK}."
	/usr/bin/pv < /dev/urandom > /dev/${CLIENTDISK}

	echo ""
	echo "[4/7] Writing a stream of random characters to ${CLIENTDISK}."
	/usr/bin/pv < /dev/urandom > /dev/${CLIENTDISK}

	echo ""
	echo "[5/7] Writing a stream of random characters to ${CLIENTDISK}."
	/usr/bin/pv < /dev/urandom > /dev/${CLIENTDISK}

	echo ""
	echo "[6/7] Writing a stream of random characters to ${CLIENTDISK}."
	/usr/bin/pv < /dev/urandom > /dev/${CLIENTDISK}

	echo ""
	echo "[7/7] Writing a stream of random characters to ${CLIENTDISK}."
	/usr/bin/pv < /dev/urandom > /dev/${CLIENTDISK}

	echo ""
	echo ""
	echo "The drive ${CLIENTDISK} is erased using Schneier's method."
}



function gutmann {
	clear
	echo ""
	echo "UIT-TSS-SHRED running in Gutmann mode."
	echo ""

	RANDOMBIT1=$(cat /dev/urandom | xxd -plain | head -1 | cut -c 1)
	RANDOMBIT2=$(cat /dev/urandom | xxd -plain | head -1 | cut -c 1)
	RANDOMBIT3=$(cat /dev/urandom | xxd -plain | head -1 | cut -c 1)
	RANDOMBIT4=$(cat /dev/urandom | xxd -plain | head -1 | cut -c 1)
	RANDOMBIT5=$(cat /dev/urandom | xxd -plain | head -1 | cut -c 1)
	RANDOMBIT6=$(cat /dev/urandom | xxd -plain | head -1 | cut -c 1)
	RANDOMBIT7=$(cat /dev/urandom | xxd -plain | head -1 | cut -c 1)
	RANDOMBIT8=$(cat /dev/urandom | xxd -plain | head -1 | cut -c 1)

	echo ""
	echo "[1/35] Writing a pass of a random bit (${RANDOMBIT1}) to ${CLIENTDISK}"
	/usr/bin/yes "${RANDOMBIT1}" | (pv > /dev/${CLIENTDISK})

	echo "[2/35] Writing a pass of a random bit (${RANDOMBIT2}) to ${CLIENTDISK}"
	/usr/bin/yes "${RANDOMBIT2}" | (pv > /dev/${CLIENTDISK})

	echo "[3/35] Writing a pass of a random bit (${RANDOMBIT3}) to ${CLIENTDISK}"
	/usr/bin/yes "${RANDOMBIT3}" | (pv > /dev/${CLIENTDISK})

	echo "[4/35] Writing a pass of a random bit (${RANDOMBIT4}) to ${CLIENTDISK}"
	/usr/bin/yes "${RANDOMBIT4}" | (pv > /dev/${CLIENTDISK})

	echo "[5/35] Writing pattern 01010101 to ${CLIENTDISK}"
	/usr/bin/yes "01010101" | (pv > /dev/${CLIENTDISK})

	echo "[6/35] Writing pattern 10101010 to ${CLIENTDISK}"
	/usr/bin/yes "10101010" | (pv > /dev/${CLIENTDISK})

	echo "[7/35] Writing pattern 10010010 to ${CLIENTDISK}"
	/usr/bin/yes "10010010" | (pv > /dev/${CLIENTDISK})

	echo "[8/35] Writing pattern 01001001 to ${CLIENTDISK}"
	/usr/bin/yes "01001001" | (pv > /dev/${CLIENTDISK})

	echo "[9/35] Writing pattern 00100100 to ${CLIENTDISK}"
	/usr/bin/yes "00100100" | (pv > /dev/${CLIENTDISK})

	echo "[10/35] Writing pattern 00000000 to ${CLIENTDISK}"
	/usr/bin/yes "00000000" | (pv > /dev/${CLIENTDISK})

	echo "[11/35] Writing pattern 00010001 to ${CLIENTDISK}"
	/usr/bin/yes "00010001" | (pv > /dev/${CLIENTDISK})

	echo "[12/35] Writing pattern 00100010 to ${CLIENTDISK}"
	/usr/bin/yes "00100010" | (pv > /dev/${CLIENTDISK})

	echo "[13/35] Writing pattern 00110011 to ${CLIENTDISK}"
	/usr/bin/yes "00110011" | (pv > /dev/${CLIENTDISK})

	echo "[14/35] Writing pattern 01000100 to ${CLIENTDISK}"
	/usr/bin/yes "01000100" | (pv > /dev/${CLIENTDISK})

	echo "[15/35] Writing pattern 01010101 to ${CLIENTDISK}"
	/usr/bin/yes "01010101" | (pv > /dev/${CLIENTDISK})

	echo "[16/35] Writing pattern 01100110 to ${CLIENTDISK}"
	/usr/bin/yes "01100110" | (pv > /dev/${CLIENTDISK})

	echo "[17/35] Writing pattern 01110111 to ${CLIENTDISK}"
	/usr/bin/yes "01110111" | (pv > /dev/${CLIENTDISK})

	echo "[18/35] Writing pattern 10001000 to ${CLIENTDISK}"
	/usr/bin/yes "10001000" | (pv > /dev/${CLIENTDISK})

	echo "[19/35] Writing pattern 10011001 to ${CLIENTDISK}"
	/usr/bin/yes "10011001" | (pv > /dev/${CLIENTDISK})

	echo "[20/35] Writing pattern 10101010 to ${CLIENTDISK}"
	/usr/bin/yes "10101010" | (pv > /dev/${CLIENTDISK})

	echo "[21/35] Writing pattern 10111011 to ${CLIENTDISK}"
	/usr/bin/yes "10111011" | (pv > /dev/${CLIENTDISK})

	echo "[22/35] Writing pattern 11001100 to ${CLIENTDISK}"
	/usr/bin/yes "11001100" | (pv > /dev/${CLIENTDISK})

	echo "[23/35] Writing pattern 11011101 to ${CLIENTDISK}"
	/usr/bin/yes "11011101" | (pv > /dev/${CLIENTDISK})

	echo "[24/35] Writing pattern 11101110 to ${CLIENTDISK}"
	/usr/bin/yes "11101110" | (pv > /dev/${CLIENTDISK})

	echo "[25/35] Writing pattern 11111111 to ${CLIENTDISK}"
	/usr/bin/yes "11111111" | (pv > /dev/${CLIENTDISK})

	echo "[26/35] Writing pattern 10010010 to ${CLIENTDISK}"
	/usr/bin/yes "10010010" | (pv > /dev/${CLIENTDISK})

	echo "[27/35] Writing pattern 01001001 to ${CLIENTDISK}"
	/usr/bin/yes "01001001" | (pv > /dev/${CLIENTDISK})

	echo "[28/35] Writing pattern 00100100 to ${CLIENTDISK}"
	/usr/bin/yes "00100100" | (pv > /dev/${CLIENTDISK})

	echo "[29/35] Writing pattern 01101101 to ${CLIENTDISK}"
	/usr/bin/yes "01101101" | (pv > /dev/${CLIENTDISK})

	echo "[30/35] Writing pattern 10110110 to ${CLIENTDISK}"
	/usr/bin/yes "10110110" | (pv > /dev/${CLIENTDISK})

	echo "[31/35] Writing pattern 11011011 to ${CLIENTDISK}"
	/usr/bin/yes "11011011" | (pv > /dev/${CLIENTDISK})

	echo "[32/35] Writing a pass of a random bit (${RANDOMBIT5}) to ${CLIENTDISK}"
	/usr/bin/yes "${RANDOMBIT5}" | (pv > /dev/${CLIENTDISK})

	echo "[33/35] Writing a pass of a random bit (${RANDOMBIT6}) to ${CLIENTDISK}"
	/usr/bin/yes "${RANDOMBIT6}" | (pv > /dev/${CLIENTDISK})

	echo "[34/35] Writing a pass of a random bit (${RANDOMBIT7}) to ${CLIENTDISK}"
	/usr/bin/yes "${RANDOMBIT7}" | (pv > /dev/${CLIENTDISK})

	echo "[35/35] Writing a pass of a random bit (${RANDOMBIT8}) to ${CLIENTDISK}"
	/usr/bin/yes "${RANDOMBIT8}" | (pv > /dev/${CLIENTDISK})

	echo ""
	echo ""
	echo "The drive ${CLIENTDISK} is erased using Gutmann's method."
}



function execute {
	start_time=$SECONDS
	
	if [[ $MODE == 'default' ]]; then
	default
	fi

	if [[ $MODE == 'zero' ]]; then
	zero
	fi

	if [[ $MODE == 'secureerase' ]]; then
	secureerase
	fi

	if [[ $MODE == 'dod' ]]; then
	dod
	fi

	if [[ $MODE == 'rcmp' ]]; then
	rcmp
	fi
	
	if [[ $MODE == 'gutmann' ]]; then
	gutmann
	fi
	
	if [[ $MODE == 'schneier' ]]; then
	schneier
	fi
}



function terminate {
	elapsed=$(( SECONDS - start_time ))
	TIME=$(eval "echo $(date -ud "@$elapsed" +'$((%s/3600/24)) days %H hours and %M minutes')")
	echo ""
	echo ""
	echo "--------------------"
	echo ""
	/usr/bin/play /root/oven.mp3 &> /dev/null
	echo "Process has finished in ${TIME}."
	read -p "Press Enter to shutdown..."
	poweroff
}



intro
modeselect
diskselect
execute
terminate
EOF

(cd /opt/UIT-TSS-SHRED && \
	lb build)
