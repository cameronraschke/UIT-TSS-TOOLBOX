#!/bin/bash

if [ ! -f /opt/live-build.deb ]; then
/usr/bin/apt purge live-build -y
/usr/bin/wget http://ftp.us.debian.org/debian/pool/main/l/live-build/live-build_20220505_all.deb \
	--output-document=/opt/debian-live.deb
/usr/bin/apt install /opt/debian-live.deb -y
fi

/usr/bin/apt install dosfstools -y

rm -r /opt/UIT-TSS-SHRED/
mkdir /opt/UIT-TSS-SHRED/

( cd /opt/UIT-TSS-SHRED/ && \

	lb clean && \

	/usr/bin/lb config \
		--apt apt \
		--apt-recommends true \
		--apt-secure true \
		--apt-source-archives true \
		--architecture amd64 \
		--archive-areas 'main' \
		--binary-filesystem fat32 \
		--binary-images iso-hybrid \
		--bootappend-live "boot=live live-media=removable toram username=root hostname=UIT-TSS-SHRED \
			timezone=America/Chicago" \
		--bootloaders "grub-efi syslinux" \
		--chroot-filesystem squashfs \
		--compression gzip \
		--clean \
		--debian-installer live \
		--debian-installer-distribution bullseye \
		--distribution bullseye \
		--debootstrap-options "--variant=minbase --arch=amd64" \
		--hdd-label UIT-TSS-SHRED \
		--image-name UIT-TSS-SHRED \
		--initramfs live-boot \
		--initsystem systemd \
		--iso-application UIT-TSS-SHRED \
		--iso-preparer "Cameron Raschke caraschke@uh.edu" \
		--iso-publisher "Cameron Raschke caraschke@uh.edu" \
		--iso-volume UIT-TSS-SHRED \
		--mode debian \
		--system live \
		--uefi-secure-boot enable \
		--updates true)

mkdir -p /opt/UIT-TSS-SHRED/config/bootloaders
cp -r /usr/share/live/build/bootloaders/isolinux /opt/UIT-TSS-SHRED/config/bootloaders
cp -r /usr/share/live/build/bootloaders/grub-pc /opt/UIT-TSS-SHRED/config/bootloaders

cat <<'EOF' > /opt/UIT-TSS-SHRED/config/bootloaders/isolinux/isolinux.cfg
UI vesamenu.c32

MENU TITLE Boot Menu
DEFAULT linux
        TIMEOUT 10
        MENU RESOLUTION 640 480
        SAY Now booting into UIT-TSS-SHRED by Cameron Raschke
label linux
        menu label UIT-TSS-SHRED by Cameron Raschke
        menu default
        linux /live/vmlinuz
        initrd /live/initrd.img
        append @APPEND_LIVE@
EOF

rm -r /opt/UIT-TSS-SHRED/config/bootloaders/grub-pc/*
cat <<'EOF' > /opt/UIT-TSS-SHRED/config/bootloaders/grub-pc/grub.cfg
insmod part_gpt
insmod part_msdos
insmod fat
insmod iso9660
insmod gfxterm

set gfxmode=800x600
terminal_output gfxterm

set default="0"
set timeout=0
set timeout_style=hidden

menuentry "UIT-TSS-SHRED by Cameron Raschke" {
        linux @KERNEL_LIVE@ @APPEND_LIVE@
        initrd @INITRD_LIVE@
}
EOF

cat <<'EOF' > /opt/UIT-TSS-SHRED/config/package-lists/live.list.chroot
live-boot
live-config
live-config-systemd
systemd-sysv
openssl
less
nano
vim
cifs-utils
passwd
locales
firmware-linux-free
parted
gdisk
libasound2
libasound2-plugins
alsa-utils
sox
libsox-fmt-all
kbd
iptables
hdparm
util-linux
nvme-cli
procps
coreutils
pv
EOF

mkdir -p /opt/UIT-TSS-SHRED/config/includes.chroot/root/
cat <<'EOF' > /opt/UIT-TSS-SHRED/config/hooks/live/0100-uit-tss-toolbox-setup.hook.chroot

/usr/sbin/sysctl -w "net.ipv6.conf.all.disable_ipv6=1" &>/dev/null
/usr/sbin/sysctl -w "net.ipv6.conf.default.disable_ipv6=1" &>/dev/null
/usr/sbin/sysctl -w "net.ipv4.conf.default.rp_filter=2" &>/dev/null
/usr/sbin/sysctl -w "net.ipv4.conf.all.rp_filter=2" &>/dev/null
/usr/sbin/sysctl -w "net.ipv4.ip_forward=0" &>/dev/null
/usr/sbin/sysctl -w "net.ipv6.conf.all.forwarding=1" &>/dev/null
/usr/sbin/sysctl -w  "net.ipv6.conf.default.forwarding=1" &>/dev/null
/usr/sbin/sysctl -p &>/dev/null

/usr/sbin/sysctl -w "kernel.printk=2 4 1 2" &>/dev/null
/usr/sbin/sysctl -w "kernel.kptr_restrict=1" &>/dev/null
/usr/sbin/sysctl -w "vm.mmap_min_addr=65536" &>/dev/null
/usr/sbin/sysctl -p &>/dev/null

echo "UIT-TSS-SHRED" > /etc/hostname
echo -e "\nWelcome to UIT-TSS-SHRED by Cameron Raschke.\n" > /etc/motd
echo -e "\nWelcome to UIT-TSS-SHRED by Cameron Raschke.\n" > /etc/issue.net
echo -e "Banner /etc/issue.net" >> /etc/ssh/sshd_config

/usr/bin/apt purge iproute2 -y &>/dev/null
EOF

chmod 777 /opt/UIT-TSS-SHRED/config/hooks/live/0100-uit-tss-toolbox-setup.hook.chroot

mkdir -p /opt/UIT-TSS-SHRED/config/includes.chroot/root/
/usr/bin/wget https://soundboardguy.com/wp-content/uploads/2022/01/Oven-Timer-Ding.mp3 \
	--output-document=/opt/UIT-TSS-SHRED/config/includes.chroot/root/oven.mp3

mkdir -p /opt/UIT-TSS-SHRED/config/includes.chroot/root
touch /opt/UIT-TSS-SHRED/config/includes.chroot/root/.bash_profile
cat <<'EOF' > /opt/UIT-TSS-SHRED/config/includes.chroot/root/.bash_profile
#!/bin/bash

clear

echo ""
echo "Configuring Kernel..."
/usr/sbin/iptables -P INPUT DROP &>/dev/null
/usr/sbin/iptables -P FORWARD DROP &>/dev/null
/usr/sbin/iptables -P OUTPUT DROP &>/dev/null
/usr/sbin/sysctl -w "net.ipv6.conf.all.disable_ipv6=1" &>/dev/null
/usr/sbin/sysctl -w "net.ipv6.conf.default.disable_ipv6=1" &>/dev/null
/usr/sbin/sysctl -w "net.ipv4.conf.default.rp_filter=2" &>/dev/null
/usr/sbin/sysctl -w "net.ipv4.conf.all.rp_filter=2" &>/dev/null
/usr/sbin/sysctl -w "net.ipv4.ip_forward=0" &>/dev/null
/usr/sbin/sysctl -w "net.ipv6.conf.all.forwarding=1" &>/dev/null
/usr/sbin/sysctl -w  "net.ipv6.conf.default.forwarding=1" &>/dev/null
/usr/sbin/sysctl -w "kernel.printk=2 4 1 2" &>/dev/null
/usr/sbin/sysctl -w "kernel.kptr_restrict=1" &>/dev/null
/usr/sbin/sysctl -w "vm.mmap_min_addr=65536" &>/dev/null
/usr/sbin/sysctl -p &>/dev/null
echo "Done."
echo ""
 
echo "Configuring audio..."
/usr/bin/amixer sset Master 100% &>/dev/null
/usr/bin/amixer set Master unmute &>/dev/null
/usr/bin/amixer sset Speakers 100% &>/dev/null
/usr/sbin/amixer set Speakers unmute &>/dev/null
echo "Done."
echo ""

echo "Configuring font..."
/usr/bin/setfont /usr/share/consolefonts/Lat7-TerminusBold16.psf.gz
echo "Done."
echo ""

sleep 1

clear

CLIENTDISK=''
SSD_REGEX='sd.*'
NVME_REGEX='nvme.*'
SCSI_REGEX='hd.*'



function intro {
	clear
	echo ""
	echo -e "\nWelcome to UIT-TSS-SHRED by Cameron Raschke.\n"
	echo "Press CTRL + C at any time to exit"
	echo "If you have exited and want to restart UIT-TSS-SHRED, press CTRL + D"
	echo ""
	echo ""
	echo ""
	echo "| |    | |  | |     | |"
	echo "| |    | |  | |_____| |"
	echo "| |    | |  | |_____| |"
	echo "| |____| |  | |     | |"
	echo "\________/  | |     | |"
	echo ""
	echo "------------------------------"
	echo ""
	echo 'Checklist:
	-Physical connections
	   * Make sure that power is plugged in to the client.
	   * Do not use UIT-TSS-SHRED on USB drives or drives connected over USB.
	-General best practices
	   * Sanitize laptops with cleaner before imaging them.
	   * Reset BIOS to default/factory settings before imaging.
	-Dells
	   * Make sure SATA mode is in AHCI mode and not RAID mode.
	      * This is usually under "System Configuration" or "Storage" in BIOS.
	      * Every Dell is in RAID mode by default. 
	      * If you reset BIOS, make sure you change SATA mode after the reset.
	      
	*** WARNING *** After pressing Enter, the system will enter hibernate mode.
	This is normal. Please wake up the system after it hibernates. *** WARNING ***
	'
	read -p "Please remove the thumb drive and press Enter...."
	echo -n mem > /sys/power/state
	clear
}



function modeselect {
	echo ""
	echo "Choose a mode:"

	echo ""
	echo "1 NIST SP 800-88 (Default)
	-Mixture of modes"

	echo ""
	echo "2 Zero Mode + Quick Verify
	-One pass of zeroes
	-Quick verification step"
	
	echo ""
	echo "3 DOD 5220.22-M/NCSC-TG-025/AFSSI-5020/HMG IS5
	-Writes a pass of zeroes, then ones, then a random bit
	-3 passes, 3 verifications"

	echo ""
	echo "4 RCMP TSSIT OPS-II/VSITR
	-Alternates passes between 0's and 1's 6 times
	-Writes random bit, verifies random bit"

	echo ""
	echo "5 Schneier
	-A pass of 1's then a pass of 0's
	-Five passes of a random stream of characters"

	echo ""
	echo "6 Gutmann
	-Four random character passes
	-27 predefined pattern passes
	-Four random character passes"
	
	echo ""
	echo "7 Verify Only
	-Does not write data
	-Different types of verification"
	
	echo ""
	echo "8 Custom Mode
	-User chooses different options"

	echo ""
	read -n1 -p "Choose [1-7] " MODESELECT
	echo ""
	case $MODESELECT in
	1)
	MODE='nist'
	RMODE='NIST 800-88r1 Mode (Default)'
	;;
	2)
	MODE='zero'
	RMODE='Zero Mode'
	;;
	3)
	MODE='dod'
	RMODE='DOD 5220.22-M/NCSC-TG-025/AFSSI-5020/HMG IS5 Mode'
	;;
	4)
	MODE='rcmp'
	RMODE='RCMP TSSIT OPS-II/VSITR Mode'
	;;
	5)
	MODE='schneier'
	RMODE='Schneier Mode'
	;;
	6)
	MODE='gutmann'
	RMODE='Gutmann Mode'
	;;
	7)
	MODE='verify'
	RMODE='Verify Mode'
	;;
	7)
	MODE='custom'
	RMODE='Custom Mode'
	;;
	*)
	modeselect
	;;
	esac
}



function diskselect {
	DISKNAMES=$(lsblk --nodeps --noheadings -o NAME --exclude 1,2,7,11)
	clear
	echo ""
	echo "The mode is: ${RMODE}"
	echo ""
    echo "These are the current disks and their sizes:"
    echo "$(lsblk --nodeps --noheadings -o NAME,SIZE --exclude 1,2,7,11)"
    echo ""
    PS3="Select a drive: "
    select CLIENTDISK in ${DISKNAMES}
    do
        if [[ $CLIENTDISK =~ sd.* || $CLIENTDISK =~ nvme.* ]]; then
		echo ""
        echo "$(lsblk /dev/${CLIENTDISK} -o NAME,SIZE,TYPE,MOUNTPOINT)"
		echo ""
        echo "You chose ${CLIENTDISK}."
        read -p "Press Enter to confirm...."
        echo ""
        break
        else
		echo "Invalid block device selected."
		echo ""
		diskselect
        exit 1
        fi
    done
}



function randbit {
	RANDBIT=$(cat /dev/urandom | xxd -plain | head -1 | cut -c 1)
}



function randdisk {
	RANDSECTIONS='1000'
	RANDDIVPERSEC='2'
	RANDBS='1000000'
	DISKSIZEMB=$(( $(blockdev --getsize64 /dev/${CLIENTDISK}) / 1000000 ))
	DISKRANDAMOUNT=$(( ${DISKSIZEMB} / ${RANDSECTIONS} ))
	a='0'
	i='0'
	DISKSIZEGB=$(( $(blockdev --getsize64 /dev/${CLIENTDISK}) / 1000000 / 1000 ))
	RANDWRITESIZE=$(( ${DISKSIZEGB} / 4 + 1 ))
	RANDCOUNT=$(( ${DISKRANDAMOUNT} / 100 * ${PCNTOFSECTOR} / 2 ))

	echo "Filling ${PCNTOFSECTOR}% of ${CLIENTDISK} with a stream of random bits...."
	echo ""
	echo ""

	if [[ $PCNTOFSECTOR == '100' ]]; then
	echo "Filling ${PCNTOFSECTOR}% of ${CLIENTDISK} with a stream of random bits...."
	/usr/bin/pv < /dev/urandom > /dev/${CLIENTDISK}
	return 0
	fi
	
	while [[ $i -le $RANDSECTIONS ]]; do

	echo -e "\r\033[1A\033[0KWriting to section ${i}/${RANDSECTIONS}"

	RANDCOUNT1=$(shuf -i 1-${RANDCOUNT} -n 1)
    RANDSKIP1=$(( $(shuf -i 1-$(( ${DISKRANDAMOUNT} / ${RANDDIVPERSEC} )) -n 1) + ${a} ))
    dd if=/dev/urandom bs=${RANDBS} count=${RANDCOUNT1} seek=${RANDSKIP1} of=/dev/${CLIENTDISK} iflag=fullblock status=none &>/dev/null


	RANDCOUNT2=$(shuf -i 1-${RANDCOUNT} -n 1)
    RANDSKIP2=$(( ${RANDSKIP1} + $(shuf -i 1-$(( ${DISKRANDAMOUNT} - ${DISKRANDAMOUNT} / ${RANDDIVPERSEC} )) -n 1) + ${a} ))
    dd if=/dev/urandom bs=${RANDBS} count=${RANDCOUNT2} seek=${RANDSKIP2} of=/dev/${CLIENTDISK} iflag=fullblock status=none &>/dev/null

	i=$(( ${i} + 1 ))
	a=$(( ${a} + ${RANDSECTIONS} ))

	done

	echo ""
	echo "[1/2] Completely filling the first and last sector"
    dd if=/dev/urandom bs=${RANDBS} count=${DISKRANDAMOUNT} seek=0 of=/dev/${CLIENTDISK} iflag=fullblock status=none
	echo -e "\r\033[1A\033[0K[2/2] Completely filling the first and last sector"
	dd if=/dev/urandom bs=${RANDBS} count=${DISKRANDAMOUNT} seek=$(( ${DISKSIZEMB} - ${DISKRANDAMOUNT} )) of=/dev/${CLIENTDISK} iflag=fullblock status=none
}



function zerodisk {
	ZEROSECTIONS='1000'
	ZERODIVPERSEC='2'
	ZEROBS='1000000'
	DISKSIZEMB=$(( $(blockdev --getsize64 /dev/${CLIENTDISK}) / 1000000 ))
	DISKZEROAMOUNT=$(( ${DISKSIZEMB} / ${ZEROSECTIONS} ))
	PCNTOFSECTOR='50'
	a='0'
	i='0'
	DISKSIZEGB=$(( $(blockdev --getsize64 /dev/${CLIENTDISK}) / 1000000 / 1000 ))
	ZEROWRITESIZE=$(( ${DISKSIZEGB} / 4 + 1 ))
	ZEROCOUNT=$(( ${DISKZEROAMOUNT} / 100 * ${PCNTOFSECTOR} / 2 ))

	echo "Filling ${PCNTOFSECTOR}% of ${CLIENTDISK} with a stream of null bits...."
	echo ""
	echo ""

	if [[ PCNTOFSECTOR == '100' ]]; then
		echo "Filling ${PCNTOFSECTOR}% of ${CLIENTDISK} with a stream of null bits...."
		/usr/bin/pv < /dev/zero > /dev/${CLIENTDISK}
		return 0
	fi
	
	while [[ $i -le $ZEROSECTIONS ]]; do

	echo -e "\r\033[1A\033[0KWriting to section ${i}/${ZEROSECTIONS}"

	ZEROCOUNT1=$(shuf -i 1-${ZEROCOUNT} -n 1)
    ZEROSKIP1=$(( $(shuf -i 1-$(( ${DISKZEROAMOUNT} / ${ZERODIVPERSEC} )) -n 1) + ${a} ))
    dd if=/dev/zero bs=${ZEROBS} count=${ZEROCOUNT1} seek=${ZEROSKIP1} of=/dev/${CLIENTDISK} iflag=fullblock status=none &>/dev/null


	ZEROCOUNT2=$(shuf -i 1-${ZEROCOUNT} -n 1)
    ZEROSKIP2=$(( ${ZEROSKIP1} + $(shuf -i 1-$(( ${DISKZEROAMOUNT} - ${DISKZEROAMOUNT} / ${ZERODIVPERSEC} )) -n 1) + ${a} ))
    dd if=/dev/zero bs=${ZEROBS} count=${ZEROCOUNT2} seek=${ZEROSKIP2} of=/dev/${CLIENTDISK} iflag=fullblock status=none &>/dev/null

	i=$(( ${i} + 1 ))
	a=$(( ${a} + ${ZEROSECTIONS} ))

	done

	echo ""
	echo "[1/2] Completely filling the first and last sector"
    dd if=/dev/zero bs=${ZEROBS} count=${DISKZEROAMOUNT} seek=0 of=/dev/${CLIENTDISK} iflag=fullblock status=none
	echo -e "\r\033[1A\033[0K[2/2] Completely filling the first and last sector"
	dd if=/dev/zero bs=${ZEROBS} count=${DISKZEROAMOUNT} seek=$(( ${DISKSIZEMB} - ${DISKZEROAMOUNT} )) of=/dev/${CLIENTDISK} iflag=fullblock status=none
}



function chardisk {
	DISKSIZEGB=$(( $(blockdev --getsize64 /dev/${CLIENTDISK}) / 1000000 / 1000 ))
	CHARWRITESIZE=$(( ${DISKSIZEGB} / 4 ))
	/usr/bin/yes "${SELCHAR}" | (pv --size ${CHARWRITESIZE}g --stop-at-size > /dev/${CLIENTDISK})
}



function charfull {
	/usr/bin/yes "${SELCHAR}" | (pv > /dev/${CLIENTDISK})
}



function vrfydisk {
	VRFYSECTIONS='1000'
	VRFYDIVPERSEC='2'
	VRFYBS='1000000'
	DISKSIZEMB=$(( $(blockdev --getsize64 /dev/${CLIENTDISK}) / 1000000 ))
	DISKVRFYAMOUNT=$(( ${DISKSIZEMB} / ${VRFYSECTIONS} ))
	a='0'
	i='0'
	DISKSIZEGB=$(( $(blockdev --getsize64 /dev/${CLIENTDISK}) / 1000000 / 1000 ))
	VRFYWRITESIZE=$(( ${DISKSIZEGB} / 4 + 1 ))
	VRFYCOUNT=$(( ${DISKVRFYAMOUNT} / 100 * ${PCNTOFSECTOR} / 2 ))
	VRFYFAIL='0'

	if [[ -z $VRFYCHAR ]]; then
	VRFYCHAR='0'
	fi

	echo "Looking for non-${VRFYCHAR}'s on ${CLIENTDISK}...."
	echo ""
	echo ""

	if [[ $PCNTOFSECTOR == '100' ]]; then
		DISKVERIFY=$(/usr/bin/pv /dev/${CLIENTDISK} | grep -oP -m 1 "[^${VRFYCHAR}]" | head -1)

		if [[ -z $DISKVERIFY ]]; then
        	echo "The drive ${CLIENTDISK} is completely and securely wiped."
			return 0
		else
			echo "Non-zero bits found on device ${CLIENTDISK}. Test has failed."
			return 1
		fi

	fi
	
	while [[ $i -le $VRFYSECTIONS && $VRFYFAIL == '0' ]]; do

	echo -e "\r\033[1A\033[0KVerifying section ${i}/${VRFYSECTIONS}"

	VRFYCOUNT1=$(shuf -i 1-${VRFYCOUNT} -n 1)
    VRFYSKIP1=$(( $(shuf -i 1-$(( ${DISKVRFYAMOUNT} / ${VRFYDIVPERSEC} )) -n 1) + ${a} ))
    if [[ $(dd if=/dev/${CLIENTDISK} bs=${VRFYBS} count=${VRFYCOUNT1} skip=${VRFYSKIP1} iflag=fullblock status=none \
        | grep --quiet -oP -m 1 [^${VRFYCHAR}]; echo $?) == '0' ]]; then
                VRFYFAIL='1'
                echo "Bad bits found on device ${CLIENTDISK}."
        break
    fi


	VRFYCOUNT2=$(shuf -i 1-${VRFYCOUNT} -n 1)
    VRFYSKIP2=$(( ${VRFYSKIP1} + $(shuf -i 1-$(( ${DISKVRFYAMOUNT} - ${DISKVRFYAMOUNT} / ${VRFYDIVPERSEC} )) -n 1) + ${a} ))
    if [[ $(dd if=/dev/${CLIENTDISK} bs=${VRFYBS} count=${VRFYCOUNT2} skip=${VRFYSKIP2} iflag=fullblock status=none \
        | grep --quiet -oP -m 1 [^${VRFYCHAR}]; echo $?) == '0' ]]; then
                VRFYFAIL='1'
                echo "Bad bits found on device ${CLIENTDISK}."
        break
    fi

	i=$(( ${i} + 1 ))
	a=$(( ${a} + ${VRFYSECTIONS} ))

	done

    if [[ $(dd if=/dev/${CLIENTDISK} bs=${VRFYBS} count=1000 skip=$(( ${DISKSIZEMB} - 1000 )) iflag=fullblock status=none \
        | grep --quiet -oP -m 1 [^${VRFYCHAR}]; echo $?) == '0' && $VRFYFAIL == '0' ]]; then
                VRFYFAIL='1'
                echo "Bad bits found on device ${CLIENTDISK}."
        break
    fi

	echo ""
    echo "${i} different locations of ${CLIENTDISK} have been verified."
	if [[ $VRFYFAIL == '0' ]]; then
	echo "Test passed successfully!"
	else
	echo "Test failed."
	fi
}



function secerase {
	SSD_REGEX='sd.*'
	NVME_REGEX='nvme.*'
	SCSI_REGEX='hd.*'

	if [[ $CLIENTDISK =~ $SSD_REGEX ]]; then 
		SECERASEFAIL=0
		/usr/sbin/hdparm --user-master u --security-set-pass UHouston /dev/${CLIENTDISK} &>/dev/null
		/usr/sbin/hdparm --user-master u --security-erase UHouston /dev/${CLIENTDISK} &>/dev/null
	fi
	
	if [[ $CLIENTDISK =~ $NVME_REGEX ]]; then
		SECERASEFAIL=0
		/usr/sbin/nvme format /dev/${CLIENTDISK} --ses=1 --namespace-id=1 &>/dev/null
		/usr/sbin/nvme format /dev/${CLIENTDISK} --ses=2 --namespace-id=1 &>/dev/null
	fi
	
	if [[ $CLIENTDISK =~ $SCSI_REGEX ]]; then
		SECERASEFAIL=1
	fi

	if [[ $SECERASEFAIL == '1' ]]; then
		echo "No compatible SATA or NVME drive is detected. Can't use Secure Erase...."
	fi
}



function iorem {
	sync
	sleep 10
	sync
	sleep 10
	echo 1 > /proc/sys/vm/drop_caches
	echo 2 > /proc/sys/vm/drop_caches
	echo 3 > /proc/sys/vm/drop_caches
	hdparm -F /dev/${CLIENTDISK}
	blockdev -flushbufs /dev/${CLIENTDISK}
	umount /dev/${CLIENTDISK}
	hdparm -Y /dev/${CLIENTDISK}
	echo 1 > /sys/block/${CLIENTDISK}/device/delete
}



function iorefresh {
	echo "1" > /sys/class/fc_host/host/issue_lip
}



function nist {
	clear
	echo ""
	echo "UIT-TSS-SHRED running in default mode."
	
	echo ""
	echo ""
	echo "Step [1/3]: "
	echo ""
	PCNTOFSECTOR='25'
	randdisk
	
	echo ""
	echo ""
	echo "[2/3] Using Secure Erase on ${CLIENTDISK}. This can take a while, please keep the device powered on...."
	secerase
	
	echo ""
	echo ""
	VRFYCHAR='0'
	PCNTOFSECTOR='10'
	echo "Step [3/3]: "
	echo ""
	vrfydisk
}



function zero {
	clear
	echo ""
	echo "UIT-TSS-SHRED running in zero mode."
	echo ""

	echo ""
	echo "[1/2] Using the Write Zero method on ${CLIENTDISK}...."
	sleep 1
	zerofull
	
	echo ""
	echo "[2/2] Verifying - searching sectors on ${CLIENTDISK} for non-${VRFYCHAR} bits...."
	sleep 1
	VRFYCHAR='0'
	vrfyfast
}



function dod {
	randbit
	
	clear
	echo ""
	echo "UIT-TSS-SHRED running in DOD 5220.22-M mode."
	echo ""

	echo ""
	echo "[1/6] Writing a pass of 0's to ${CLIENTDISK}"
	zerofull
	
	echo ""
	echo "[2/6] Verifying disk ${CLIENTDISK} - checking for 0's...."
	VRFYCHAR='0'
	vrfyfull

	echo ""
	echo "[3/6] Writing a pass of 1's to ${CLIENTDISK}"
	SELBIT='1'
	charfull
	
	echo ""
	echo "[4/6] Verifying disk ${CLIENTDISK} - checking for 1's...."
	VRFYCHAR='1'
	vrfyfull

	echo ""
	echo "[5/6] Writing a pass of a random bit (${RANDOMBIT}) to ${CLIENTDISK}"
	SELBIT=${RANDBIT}
	charfull
	
	echo ""
	echo "[6/6] Verifying disk ${CLIENTDISK} - checking for the random bit (${RANDOMBIT})...."
	VRFYCHAR=${RANDBIT}
	vrfyfull
}



function rcmp {
	randbit

	clear
	echo ""
	echo "UIT-TSS-SHRED running in RCMP TSSIT OPS-II mode."
	echo ""

	echo ""
	echo "[1/8] Writing a pass of 0's to ${CLIENTDISK}"
	zerofull

	echo ""
	echo "[2/8] Writing a pass of 1's to ${CLIENTDISK}"
	SELCHAR='1'
	charfull

	echo ""
	echo "[3/8] Writing a pass of 0's to ${CLIENTDISK}"
	zerofull

	echo ""
	echo "[4/8] Writing a pass of 1's to ${CLIENTDISK}"
	SELCHAR='1'
	charfull

	echo ""
	echo "[5/8] Writing a pass of 0's to ${CLIENTDISK}"
	zerofull

	echo ""
	echo "[6/8] Writing a pass of 1's to ${CLIENTDISK}"
	SELCHAR='1'
	charfull

	echo ""
	echo "[7/8] Writing a pass of a random bit (${RANDOMBIT}) to ${CLIENTDISK}"
	SELCHAR=${RANDBIT}
	charfull
	
	echo ""
	echo "[8/8] Verifying disk - checking ${CLIENTDISK} for the random bit (${RANDOMBIT})'s...."
	VRFYCHAR=${RANDBIT}
	vrfyfull
}



function schneier {
	clear
	echo ""
	echo "UIT-TSS-SHRED running in Schneier mode."
	echo ""

	echo ""
	echo "[1/7] Writing a pass of 1's to ${CLIENTDISK}"
	SELCHAR='1'
	charfull

	echo ""
	echo "[2/7] Writing a pass of 0's to ${CLIENTDISK}"
	zerofull

	echo ""
	echo "[3/7] Writing a stream of random characters to ${CLIENTDISK}."
	randfull

	echo ""
	echo "[4/7] Writing a stream of random characters to ${CLIENTDISK}."
	randfull

	echo ""
	echo "[5/7] Writing a stream of random characters to ${CLIENTDISK}."
	randfull

	echo ""
	echo "[6/7] Writing a stream of random characters to ${CLIENTDISK}."
	randfull

	echo ""
	echo "[7/7] Writing a stream of random characters to ${CLIENTDISK}."
	randfull

	echo ""
	echo ""
	echo "The drive ${CLIENTDISK} is erased using Schneier's method."
}



function gutmann {
	clear
	echo ""
	echo "UIT-TSS-SHRED running in Gutmann mode."
	echo ""

	echo ""
	echo "[1/35] Writing a pass of a random bit (${RANDOMBIT1}) to ${CLIENTDISK}"
	randbit
	SELCHAR=${RANDBIT}
	charfull

	echo "[2/35] Writing a pass of a random bit (${RANDOMBIT2}) to ${CLIENTDISK}"
	randbit
	SELCHAR=${RANDBIT}
	charfull

	echo "[3/35] Writing a pass of a random bit (${RANDOMBIT3}) to ${CLIENTDISK}"
	randbit
	SELCHAR=${RANDBIT}
	charfull

	echo "[4/35] Writing a pass of a random bit (${RANDOMBIT4}) to ${CLIENTDISK}"
	randbit
	SELCHAR=${RANDBIT}
	charfull

	echo "[5/35] Writing pattern 01010101 to ${CLIENTDISK}"
	SELCHAR='01010101'
	charfull

	echo "[6/35] Writing pattern 10101010 to ${CLIENTDISK}"
	SELCHAR='10101010'
	charfull

	echo "[7/35] Writing pattern 10010010 to ${CLIENTDISK}"
	SELCHAR='10010010'
	charfull

	echo "[8/35] Writing pattern 01001001 to ${CLIENTDISK}"
	SELCHAR='01001001'
	charfull

	echo "[9/35] Writing pattern 00100100 to ${CLIENTDISK}"
	SELCHAR='00100100'
	charfull

	echo "[10/35] Writing pattern 00000000 to ${CLIENTDISK}"
	SELCHAR='00000000'
	charfull

	echo "[11/35] Writing pattern 00010001 to ${CLIENTDISK}"
	SELCHAR='00010001'
	charfull

	echo "[12/35] Writing pattern 00100010 to ${CLIENTDISK}"
	SELCHAR='00100010'
	charfull

	echo "[13/35] Writing pattern 00110011 to ${CLIENTDISK}"
	/usr/bin/yes "00110011" | (pv > /dev/${CLIENTDISK})

	echo "[14/35] Writing pattern 01000100 to ${CLIENTDISK}"
	/usr/bin/yes "01000100" | (pv > /dev/${CLIENTDISK})

	echo "[15/35] Writing pattern 01010101 to ${CLIENTDISK}"
	/usr/bin/yes "01010101" | (pv > /dev/${CLIENTDISK})

	echo "[16/35] Writing pattern 01100110 to ${CLIENTDISK}"
	/usr/bin/yes "01100110" | (pv > /dev/${CLIENTDISK})

	echo "[17/35] Writing pattern 01110111 to ${CLIENTDISK}"
	/usr/bin/yes "01110111" | (pv > /dev/${CLIENTDISK})

	echo "[18/35] Writing pattern 10001000 to ${CLIENTDISK}"
	/usr/bin/yes "10001000" | (pv > /dev/${CLIENTDISK})

	echo "[19/35] Writing pattern 10011001 to ${CLIENTDISK}"
	/usr/bin/yes "10011001" | (pv > /dev/${CLIENTDISK})

	echo "[20/35] Writing pattern 10101010 to ${CLIENTDISK}"
	/usr/bin/yes "10101010" | (pv > /dev/${CLIENTDISK})

	echo "[21/35] Writing pattern 10111011 to ${CLIENTDISK}"
	/usr/bin/yes "10111011" | (pv > /dev/${CLIENTDISK})

	echo "[22/35] Writing pattern 11001100 to ${CLIENTDISK}"
	/usr/bin/yes "11001100" | (pv > /dev/${CLIENTDISK})

	echo "[23/35] Writing pattern 11011101 to ${CLIENTDISK}"
	/usr/bin/yes "11011101" | (pv > /dev/${CLIENTDISK})

	echo "[24/35] Writing pattern 11101110 to ${CLIENTDISK}"
	/usr/bin/yes "11101110" | (pv > /dev/${CLIENTDISK})

	echo "[25/35] Writing pattern 11111111 to ${CLIENTDISK}"
	/usr/bin/yes "11111111" | (pv > /dev/${CLIENTDISK})

	echo "[26/35] Writing pattern 10010010 to ${CLIENTDISK}"
	/usr/bin/yes "10010010" | (pv > /dev/${CLIENTDISK})

	echo "[27/35] Writing pattern 01001001 to ${CLIENTDISK}"
	/usr/bin/yes "01001001" | (pv > /dev/${CLIENTDISK})

	echo "[28/35] Writing pattern 00100100 to ${CLIENTDISK}"
	/usr/bin/yes "00100100" | (pv > /dev/${CLIENTDISK})

	echo "[29/35] Writing pattern 01101101 to ${CLIENTDISK}"
	/usr/bin/yes "01101101" | (pv > /dev/${CLIENTDISK})

	echo "[30/35] Writing pattern 10110110 to ${CLIENTDISK}"
	/usr/bin/yes "10110110" | (pv > /dev/${CLIENTDISK})

	echo "[31/35] Writing pattern 11011011 to ${CLIENTDISK}"
	/usr/bin/yes "11011011" | (pv > /dev/${CLIENTDISK})

	echo "[32/35] Writing a pass of a random bit (${RANDOMBIT5}) to ${CLIENTDISK}"
	/usr/bin/yes "${RANDOMBIT5}" | (pv > /dev/${CLIENTDISK})

	echo "[33/35] Writing a pass of a random bit (${RANDOMBIT6}) to ${CLIENTDISK}"
	/usr/bin/yes "${RANDOMBIT6}" | (pv > /dev/${CLIENTDISK})

	echo "[34/35] Writing a pass of a random bit (${RANDOMBIT7}) to ${CLIENTDISK}"
	/usr/bin/yes "${RANDOMBIT7}" | (pv > /dev/${CLIENTDISK})

	echo "[35/35] Writing a pass of a random bit (${RANDOMBIT8}) to ${CLIENTDISK}"
	/usr/bin/yes "${RANDOMBIT8}" | (pv > /dev/${CLIENTDISK})

	echo ""
	echo ""
	echo "The drive ${CLIENTDISK} is erased using Gutmann's method."
}



function verify {
	clear
	echo ""
	echo "UIT-TSS-SHRED running in Verify Mode."
	echo ""
	
	echo ""
	echo "Which level of verification do you want?"
	echo ""
	echo ""
	echo "1 Full verification (Default)
	-Longest, verifies every bit on the disk"
	echo ""
	echo "2 Very fast verification
	-10 divisions, 5GB verified"
	echo ""
	echo "3 Medium verification
	-10 divisions, 20GB verified"
	echo ""
	echo "4 Other (Manual Specification)"
	echo ""
	read -n 1 -p "Select mode [1-4]: " VRFYSELECT
	echo ""
	case $VRFYSELECT in
	1)
	VRFYMODE='full'
	;;
	2)
	VRFYMODE='fast'
	;;
	3)
	VRFYMODE='medium'
	;;
	4)
	VRFYMODE='custom'
	;;
	*)
	echo ""
	echo ""
	echo "Incorrect input selected, please try again"
	sleep 1
	verify
	;;
	esac
}


function execute {
	start_time=$SECONDS
	
	if [[ $MODE == 'nist' ]]; then
	nist
	fi

	if [[ $MODE == 'zero' ]]; then
	zero
	fi

	if [[ $MODE == 'secureerase' ]]; then
	secureerase
	fi

	if [[ $MODE == 'dod' ]]; then
	dod
	fi

	if [[ $MODE == 'rcmp' ]]; then
	rcmp
	fi
	
	if [[ $MODE == 'gutmann' ]]; then
	gutmann
	fi
	
	if [[ $MODE == 'schneier' ]]; then
	schneier
	fi
	
	if [[ $MODE == 'verify' ]]; then
	echo -n ""
	fi
}



function terminate {
	elapsed=$(( SECONDS - start_time ))
	TIME=$(eval "echo $(date -ud "@$elapsed" +'$((%s/3600/24)) days %H hours and %M minutes')")
	echo ""
	echo ""
	echo "--------------------"
	echo ""
	/usr/bin/play /root/oven.mp3 &> /dev/null
	echo "Process has finished in ${TIME}."
	read -p "Press Enter to shutdown..."
	poweroff
}



intro
modeselect
diskselect
execute
terminate
EOF

(cd /opt/UIT-TSS-SHRED && \
	lb build)
