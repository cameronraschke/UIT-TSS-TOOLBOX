#!/usr/bin/php
<?php
include('/opt/UIT-TSS-TOOLBOX/include.php');


$fd = fopen('php://stdin', 'r');
$input = trim(fgets(STDIN));
fclose($fd);

$arr = explode('|', $input);

$db = new db();

if ($arr[0] == "init") {
    $uuid = $arr[1];
    $tagNum = $arr[2];
    $serial = $arr[3];
    $macAddr = $arr[4];
    $wifiMac = $arr[5];

    $db->insertJob($uuid);

    $db->updateJob("tagnumber", $tagNum, $uuid);
    $db->updateJob("system_serial", $serial, $uuid);
    $db->updateJob("etheraddress", $macAddr, $uuid);
    $db->updateSystemData($tagNum, "wifi_mac", $wifiMac);
    $db->updateJob("date", $date, $uuid);

    function queryTime($queryTime) {
        $db = new db();
        $time = updateTimeValue();
        $db->Pselect("SELECT COUNT(time) AS 'count' FROM jobstats WHERE time = :time", array(':time' => $queryTime));
        foreach ($db->get() as $key => $value) {
            return $value["count"];
        }
    }

    do {
        sleep(1);
        $time = updateTimeValue();
    } while (queryTime($time) > 0);
    
    $db->updateJob("time", $time, $uuid);
}

if ($arr[0] == "location") {

    if (empty($arr[7])) {
        $arr[7] = "unknown";
    }

    if ($arr[1] == "begin") {
        $tagNum = $arr[2];
        $serial = $arr[3];
        $location = $arr[4];
        $status = "0";
        $note = "";
    }

    if ($arr[1] == "end") {
        $tagNum = $arr[2];
        $serial = $arr[3];
        $location = $arr[4];
        $status = "0";
        $note = "";
    }

    if ($arr[1] == "custom") {
        $tagNum = $arr[2];
        $serial = $arr[3];
        $location = $arr[4];
        $status = $arr[5];
        $note = $arr[6];
    }

    //$uuid = uniqid("location-", true);
    
    //$db->insertJob($uuid);
    //$db->updateJob("tagnumber", $tagNum, $uuid);
    //$db->updateJob("system_serial", $serial, $uuid);
    //$db->updateJob ("date", $date, $uuid);
    //$db->updateJob ("time", $time, $uuid);

    $db->insertLocation($time);
    $db->updateLocation("tagnumber", $tagNum, $time);
    $db->updateLocation("system_serial", $serial, $time);
    $db->updateLocation("location", $location, $time);
    $db->updateLocation("status", $status, $time);
    $db->updateLocation("note", $note, $time);

}


if ($arr[0] == "general") {
    $key = $arr[1];
    $value = $arr[2];
    $uuid = $arr[3];

    if ($key == "cpu_temp") {
        $value = round(bcdiv($value, 1000, 2), 0);
    }

    if (!empty($arr[4]) && $arr[4] == "nvme") {
        $value = bcmul($value, 512, 4);
        $value = bcdiv($value, 1000000000, 2);
    } elseif (!empty($arr[4]) && $arr[4] == "sata") {
        if (!empty($arr[5]) && $arr[5] == "gib") {
            $value = bcdiv($value, 1024, 2);
        } else {
            $value = bcmul($value, 512, 4);
            $value = bcdiv($value, 1000000000000, 2);
        }
    }

    if ($key == "disk_type") {
        if ($value == "1") {
            $value = "hdd";
        } elseif ($value == "0") {
            $value = "ssd";
        } elseif ($value == "nvme") {
            $value = "nvme";
        } else {
            $value = "NULL";
        }
    }

    if ($key == "ram_capacity") {
        $value = round($value / 1000000, 0);
    }

    $db->updateJob($key, $value, $uuid);

}

if ($arr[0] == "system_data") {
    $tagNum = $arr[1];
    $key = $arr[2];
    $value = $arr[3];

    $db->Pselect("SELECT tagnumber FROM system_data WHERE tagnumber = :tagnumber", array(':tagnumber' => $tagNum));
    if (is_array($db->get()) === FALSE) {
        $db->insertSystemData($tagNum);
    }

    $db->updateSystemData($tagNum, $key, $value);
}

if ($arr[0] == "system-stats") {
    $uuid = $arr[2];
    if ($arr[1] == "cpu") {
        $cpuSum = null;
        $cpuLineCount = null;
        $lines = file('/tmp/cpu-usage.txt');
        foreach ($lines as $lineNum => $line) {
            $cpuSum = $cpuSum + $line;
            $cpuLineCount = $cpuLineCount + 1;
        }
        $cpuAvg = $cpuSum / $cpuLineCount;
        $db->updateJob("cpu_usage", $cpuAvg, $uuid);
    } elseif ($arr[1] == "network") {
        $netSum = null;
        $netLineCount = null;
        $lines = file('/tmp/network-usage.txt');
        foreach ($lines as $lineNum => $line) {
            $netSum = $netSum + $line;
            $netLineCount = $netLineCount + 1;
        }
        $netSum = $netSum / 1048576 * 8;
        if ($netLineCount > 0) {
            $netAvg = $netSum / $netLineCount;
        } else {
            $netAvg = 0;
        }
        $db->updateJob("network_usage", $netAvg, $uuid);
    }
}

if ($arr[0] == "remote") {
    $tagNum = $arr[1];
    $key = $arr[2];
    $value = $arr[3];

    if ($key == "job_queued") {
        if ($value == "0") {
            $value = "NULL";
        } elseif ($value == "1") {
            $value = "data collection";
        } elseif ($value == "2") {
            $value = "hpEraseAndClone";
        } elseif ($value == "3") {
            $value = "nvmeErase";
        } elseif ($value == "9") {
            $value = "update";
        } elseif ($value == "8") {
            $value = "findmy";
        }
    }

    if ($key == "cpu_temp") {
        $value = round(bcdiv("$value", 1000, 2), 0);
    }

    if ($key == "disk_temp") {
        if ($value > 1000) {
            $cur = round(bcdiv($value, 1000, 2), 0);
            $value = $cur;
        }
    }

    if ($key == "watts_now") {
        $first = $value;
        $firstWatts = $first / 1e6;
        $second = $arr[4];
        $secWatts = $second / 1e6;

        $value = $secWatts - $firstWatts;
    }

    $db->updateRemote($tagNum, $key, $value);
}

if ($arr[0] == "bios" || $arr[0] == "client_health") {
    $tagNum = $arr[1];
    $key = $arr[2];
    $value = $arr[3];

    $db->updateClientHealth($tagNum, $key, $value);
}

?>