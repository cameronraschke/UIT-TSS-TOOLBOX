#!/usr/bin/php
<?php
/* "uit-sql-refresh-server" uses PHP to refresh the serverstats table in the mysql database. The
serverstats table is a historical aggregation of the highest level of statistics in our database. 
This script iterates through every date starting at 2023-01-09 (our first database entry) until the 
current date and updates all of the entries accordingly. */

# Connect to database and include custom functions
include('/var/lib/UIT-TSS-TOOLBOX/mysql-functions');

# Set current date and time
$dt = new DateTimeImmutable();
$date = $dt->format('Y-m-d');
$time = $dt->format('Y-m-d H:i:s.v');

echo "Updating serverstats" . PHP_EOL;

# Set $oldDate to the oldest date entry in the DB.
$oldDate = "2023-01-01";

# Iterate through all the dates between $oldDate and $date.
dbSelect("CALL iterateDate('$oldDate', '$date')");
foreach ($arr as $key => $value) {

    # Start the timer that counts how much time each date takes to process.
    $start = hrtime(true);

    # Set the variable $sqlDate to the iterated date.
    $sqlDate = $value["date"];

    # If the current date does not exist in the serverstats table, then create an entry for the current date.
    dbSelectVal("SELECT date AS result FROM serverstats WHERE date = '$sqlDate'");
    if (filter($result) == 1) {
        echo "Inserting new serverstats entry for $sqlDate." . PHP_EOL;
        dbInsertSS("$sqlDate");
    }

    # Update laptop count. A laptop counts as a distinct tagnumber in jobstats which is in the Tech Commons.
    dbSelectVal("SELECT COUNT(DISTINCT tagnumber) AS result FROM jobstats WHERE (date BETWEEN '$oldDate' AND '$sqlDate') AND department = 'techComm'");
    dbUpdateSS("laptop_count", "$result", "$sqlDate");


    # Update the average time taken to clone a computer.
    dbSelectVal("SELECT ROUND(AVG(clone_time) / 60, 0) AS result FROM jobstats WHERE clone_completed = 'Yes' AND date BETWEEN '$oldDate' AND '$sqlDate'");
    dbUpdateSS("clone_avgtime", "$result", "$sqlDate");


    # Update the average erase time of NVMe drives
    dbSelectVal("SELECT ROUND(AVG(erase_time) / 60, 0) AS result FROM jobstats WHERE erase_completed = 'yes' AND disk LIKE 'nvme%' AND date BETWEEN '$oldDate' AND '$sqlDate'");
    dbUpdateSS("nvme_erase_avgtime", "$result", "$sqlDate");


    # Update the average erase time of SATA drives (SSDs and HDDs)
    dbSelectVal("SELECT ROUND(AVG(erase_time) / 60, 0) AS result FROM jobstats WHERE erase_completed = 'yes' AND disk LIKE 'sd%' AND date BETWEEN '$oldDate' AND '$sqlDate'");
    dbUpdateSS("sata_erase_avgtime", "$result", "$sqlDate");


    # Update the number of erase jobs that have completed
    dbSelectVal("SELECT COUNT(erase_completed) AS result FROM jobstats WHERE erase_completed = 'Yes' AND date BETWEEN '$oldDate' AND '$sqlDate'");
    $eraseJobsLC = $result;
    dbUpdateSS("erase_jobs", "$result", "$sqlDate");


    # Update the number of clone jobs that have completed
    dbSelectVal("SELECT COUNT(clone_completed) AS result FROM jobstats WHERE clone_completed = 'Yes' AND date BETWEEN '$oldDate' AND '$sqlDate'");
    $cloneJobsLC = $result;
    dbUpdateSS("clone_jobs", "$result", "$sqlDate");


    # Update count of all jobs (erase jobs + clone jobs)
    if (filter($eraseJobsLC) == 1 || filter($cloneJobsLC) == 1) {
        $result = 0;
    } else {
        $result = $eraseJobsLC + $cloneJobsLC;
    }
    dbUpdateSS("all_jobs", "$result", "$sqlDate");


    # Update date of last image update
    dbSelectVal("SELECT date AS result FROM jobstats WHERE clone_master = 'Yes' AND date BETWEEN '$oldDate' AND '$sqlDate' ORDER BY time DESC LIMIT 1");
    dbUpdateSS("last_image_update", "$result", "$sqlDate");

    # Set $arr1
    $arr1 = array();
    # Get average TBW of non-HDD drives (writes only, SSD and NVMe included). This average takes into account drive model and specifications of the drive.
    dbSelect("SELECT disk_model,disk_tbw FROM static_disk_stats WHERE NOT disk_type = 'hdd'");
    foreach ($arr as $key => $value) {
        $diskTBW = $value["disk_tbw"];
        $diskModel = $value["disk_model"];
        # Select the most recent distinct tagnumber from jobstats
        $sql = "SELECT (AVG(disk_writes) / '$diskTBW' * 100) AS result FROM jobstats WHERE time IN (SELECT MAX(time) FROM jobstats WHERE date BETWEEN '$oldDate' AND '$sqlDate' ";
        $sql .= "AND disk_writes IS NOT NULL AND disk_model = '$diskModel' GROUP BY tagnumber)";
        dbSelect($sql);
        foreach ($arr as $key => $value) {
            $result = $value["result"];
            if (filter($result) == 0) {
                array_push($arr1, $result);
            }
        }
    }

    # Get average TBW and TBR of HDDs (reads and writes). This average takes into account drive model and specifications of the drive.
    dbSelect("SELECT disk_model,disk_tbw,disk_tbr FROM static_disk_stats WHERE disk_type = 'hdd'");
    foreach ($arr as $key => $value) {
        $diskTBW = $value["disk_tbw"];
        $diskTBR = $value["disk_tbr"];
        $diskModel = $value["disk_model"];
        # Select the most recent distinct tagnumber from jobstats
        $sql = "SELECT ((AVG(disk_writes) / '$diskTBW' * 100) + (AVG(disk_reads) / '$diskTBR' * 100)) / 2 AS result FROM jobstats WHERE time IN (SELECT MAX(time) FROM jobstats WHERE date BETWEEN '$oldDate' AND '$sqlDate' ";
        $sql .= "AND (disk_writes IS NOT NULL OR disk_reads IS NOT NULL) AND disk_model = '$diskModel' GROUP BY tagnumber)";
        dbSelect($sql);
        foreach ($arr as $key => $value) {
            $result = $value["result"];
            if (filter($result) == 0) {
                array_push($arr1, $result);
            }
        }
    }

    # Update the average wear of disks based on reads and writes
    if (filter($arr1) == 0 && count($arr1) > 0) {
        $avg = array_filter($arr1);
        $result = array_sum($avg) / count($avg);
        dbUpdateSS("tbw_pcnt", "$result", "$sqlDate");
    } else {
        dbUpdateSS("tbw_pcnt", "NULL", "$sqlDate");
    }


    # Get the average disk power on hours (MTBF/MTTF) and average that against the disk's specifications.
    $arr1 = array();
    dbSelect("SELECT disk_model,disk_mtbf FROM static_disk_stats WHERE disk_mtbf IS NOT NULL");
    foreach ($arr as $key => $value) {
        $diskModel = $value["disk_model"];
        $diskMTBF = $value["disk_mtbf"];
        # Select the most recent distinct tagnumber from jobstats
        $sql = "SELECT ROUND(AVG(disk_power_on_hours) / '$diskMTBF' * 100, 2) AS result FROM jobstats WHERE time IN (SELECT MAX(time) FROM jobstats WHERE date BETWEEN '$oldDate' AND '$sqlDate' AND disk_model = '$diskModel' ";
        $sql .= "AND disk_power_on_hours IS NOT NULL GROUP BY tagnumber)";
        dbSelect($sql);
        foreach ($arr as $key => $value) {
            $result = $value["result"];
            if (filter($result) == 0) {
                array_push($arr1, $result);
            }
        }
    }
    # Update the MTBF for the disks. This average takes into account drive model and specifications of the drive.
    if (filter($arr1) == 0 && count($arr1) > 0) {
        $avg = array_filter($arr1);
        $result = array_sum($avg) / count($avg);
        dbUpdateSS("disk_mtbf", "$result", "$sqlDate");
    } else {
        dbUpdateSS("disk_mtbf", "NULL", "$sqlDate");
    }


    #Update the average boot time
    dbSelectVal("SELECT ROUND(AVG(boot_time), 0) AS result FROM jobstats WHERE boot_time IS NOT NULL");
    dbUpdateSS("boot_time", "$result", "$sqlDate");


    #Update the average battery health by selecting the most recent distinct tagnumber
    $sql = "SELECT ROUND(AVG(battery_health), 0) AS result FROM jobstats WHERE time IN (SELECT MAX(time) FROM jobstats WHERE date BETWEEN '$oldDate' AND '$sqlDate' ";
    $sql .= "AND battery_health IS NOT NULL GROUP BY tagnumber)";
    dbSelectVal($sql);
    dbUpdateSS("battery_health", "$result", "$sqlDate");


    # Output time taken for specific date
    $end = hrtime(true);
    $executionTime = round(($end - $start) / 1e9, 4);
    echo "Updated serverstats for $sqlDate: " . $executionTime . " seconds" . PHP_EOL;
}

?>