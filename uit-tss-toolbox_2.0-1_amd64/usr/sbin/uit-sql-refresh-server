#!/usr/bin/php
<?php
/* "uit-sql-refresh-server" uses PHP to refresh the serverstats table in the mysql database. The
serverstats table is a table that contains the highest level of statistics in our database. 
This script iterates through every date starting at 2023-01-09 (our first database entry) until the 
current date and updates all of the entries accordingly. */

# Connect to database and include custom functions
include('/var/lib/UIT-TSS-TOOLBOX/include.php');

$timer = new scriptTimer();

echo "Updating serverstats" . PHP_EOL;
$timer->start();

# Set $startDate to the oldest date entry in the DB.
$startDate = '2023-01-09';

// New DB connection
$db = new db();

$arrCloneTime = array();
$arrNvmeErase = array();
$arrSataErase = array();
$arrEraseJobsLC = array();
$arrCloneJobsLC = array();
$arrTBW = array();
$arrMTBF = array();
$arrBatteryCharge = array();
$arrBatteryCycles = array();

# Iterate through all the dates between $startDate and $date.
$db->Pselect("CALL iterateDate(:startdate, :enddate)", array(':startdate' => $startDate, ':enddate' => $date));
foreach ($db->get() as $key => $value) {

    # Start the timer that counts how much time each date takes to process.
    echo PHP_EOL;
    $timer->startMarker();

    # If the current date does not exist in the serverstats table, then create an entry for the current date.
    $db->Pselect("SELECT date FROM serverstats WHERE date = :date", array(':date' => $value["date"]));
    if (arrFilter($db->get()) === 1) {
        echo "Inserting new serverstats entry for " . $value["date"] . PHP_EOL;
        $db->insertSS($value["date"]);
    }

    # Update client count. A client counts as a distinct tagnumber in jobstats which is in the Tech Commons or SHRL department.
    $db->Pselect("SELECT tagnumber FROM jobstats WHERE department IN ('techComm', 'shrl') AND date BETWEEN :startdate AND :itdate GROUP BY tagnumber", array(':startdate' => $startDate, ':itdate' => $value["date"]));
    if (arrFilter($db->get()) === 0) {
        foreach ($db->get() as $key => $value1) {
            $db->updateSS("client_count", count($db->get()), $value["date"]);
        }
    }
    unset($value1);

    # Update the average time taken to clone a computer.
    $db->Pselect("SELECT (clone_time / 60) AS 'clone_time' FROM jobstats WHERE clone_completed = 1 AND date = :itdate", array(':itdate' => $value["date"]));
    if (arrFilter($db->get()) === 0) {
        foreach ($db->get() as $key => $value1) {
            $arrCloneTime[] = $value1["clone_time"];
        }
    }
    if (arrFilter($arrCloneTime) === 0) {
        $arrCloneTime = array_filter($arrCloneTime);
        $cloneTime = round(array_sum($arrCloneTime) / count($arrCloneTime), 0);
        $db->updateSS("clone_avgtime", $cloneTime, $value["date"]);
    }
    unset($value1);


    # Update the average erase time of NVMe drives
    $db->Pselect("SELECT (erase_time / 60) AS 'nvme_erase_time' FROM jobstats WHERE erase_completed = 1 AND (disk_type = 'ssd' OR disk_type = 'nvme') AND date = :itdate", array(':itdate' => $value["date"]));
    if (arrFilter($db->get()) === 0) {
        foreach ($db->get() as $key => $value1) {
            $arrNvmeErase[] = $value1["nvme_erase_time"];
        }
    }
    if (arrFilter($arrNvmeErase) === 0) {
        $arrNvmeErase = array_filter($arrNvmeErase);
        $nvmeErase = round(array_sum($arrNvmeErase) / count($arrNvmeErase), 0);
        $db->updateSS("nvme_erase_avgtime", $nvmeErase, $value["date"]);
    }
    unset($value1);


    # Update the average erase time of SATA drives (SSDs and HDDs)
    $db->Pselect("SELECT (erase_time / 60) AS 'sata_erase_time' FROM jobstats WHERE erase_completed = 1 AND disk_type = 'hdd' AND date = :itdate", array(':itdate' => $value["date"]));
    if (arrFilter($db->get()) === 0) {
        foreach ($db->get() as $key => $value1) {
            $arrSataErase[] = $value1["sata_erase_time"];
        }
    }
    if (arrFilter($arrSataErase) === 0) {
        $arrSataErase = array_filter($arrSataErase);
        $sataErase = round(array_sum($arrSataErase) / count($arrSataErase), 0);
        $db->updateSS("hdd_erase_avgtime", $sataErase, $value["date"]);
    }
    unset($value1);


    # Update the number of erase jobs that have completed
    $db->Pselect("SELECT COUNT(erase_completed) as 'erase_completed' FROM jobstats WHERE erase_completed = 1 AND date = :itdate", array(':itdate' => $value["date"]));
    if (arrFilter($db->get()) === 0) {
        foreach ($db->get() as $key => $value1) {
            $arrEraseJobsLC[] = $value1["erase_completed"];
        }
        $eraseJobsLC = array_sum(array_filter($arrEraseJobsLC));
    }
    if (numFilter($eraseJobsLC) === 0) {
        $db->updateSS("erase_jobs", $eraseJobsLC, $value["date"]);
    }
    unset($value1);


    # Update the number of clone jobs that have completed
    $db->Pselect("SELECT COUNT(clone_completed) AS 'clone_completed' FROM jobstats WHERE clone_completed = 1 AND date = :itdate", array(':itdate' => $value["date"]));
    if (arrFilter($db->get()) === 0) {
        foreach ($db->get() as $key => $value1) {
            $arrCloneJobsLC[] = $value1["clone_completed"];
        }
        $cloneJobsLC = array_sum(array_filter($arrCloneJobsLC));
    }
    if (numFilter($cloneJobsLC) === 0) {
        $db->updateSS("clone_jobs", $cloneJobsLC, $value["date"]);
    }
    unset($value1);


    # Update count of all jobs (erase jobs + clone jobs)
    $allJobsLC = $eraseJobsLC + $cloneJobsLC;
    $db->updateSS("all_jobs", $allJobsLC, $value["date"]);


    # Update date of last image update
    $db->Pselect("SELECT MAX(date) AS 'date' FROM jobstats WHERE clone_master = 1 AND date BETWEEN :startdate AND :itdate", array(':startdate' => $startDate, ':itdate' => $value["date"]));
    if (arrFilter($db->get()) === 0) {
        foreach ($db->get() as $key => $value1) {
            $db->updateSS("last_image_update", $value1["date"], $value["date"]);
        }
    }
    unset($value1);


    # Get average TBW of non-HDD drives (writes only, SSD and NVMe included). This average takes into account drive model and specifications of the drive.
    $db->select("SELECT disk_model, disk_type, disk_tbw, disk_tbr, disk_mtbf FROM static_disk_stats");
    if (arrFilter($db->get()) === 0) {
        foreach ($db->get() as $key => $value1) {
            if ($value1["disk_type"] === "hdd" && numFilter($value1["disk_tbw"]) === 0 && numFilter($value1["disk_tbr"]) === 0) {
                $sql = "SELECT (disk_writes + disk_reads) / :disktbw AS 'tbw' FROM jobstats WHERE time IN (SELECT MAX(time) FROM jobstats WHERE date = :itdate AND disk_model = :diskmodel AND disk_writes IS NOT NULL AND disk_reads IS NOT NULL GROUP BY tagnumber)";
            } elseif (($value1["disk_type"] === "ssd" || $value1["disk_type"] === "ssd") && numFilter($value1["disk_tbw"]) === 0) {
                $sql = "SELECT disk_writes / :disktbw AS 'tbw' FROM jobstats WHERE time IN (SELECT MAX(time) FROM jobstats WHERE date = :itdate AND disk_model = :diskmodel AND disk_writes IS NOT NULL AND disk_reads IS NOT NULL GROUP BY tagnumber)";
            }
        }

        if (strFilter($sql) === 0) {
            $db->Pselect($sql, array(':disktbw' => $value1["disk_tbw"], ':itdate' => $value["date"], ':diskmodel' => $value1["disk_model"]));
            if (($db->get()) === 0) {
                foreach ($db->get() as $key => $value2)
                    if (numFilter($value2["tbw"])) {
                        $arrTBW[] = $value2["tbw"];
                    }
            }
        }
        unset($sql);
        unset($value2);

        if (numFilter($value1["disk_mtbf"]) === 0) {
            $db->Pselect("SELECT disk_power_on_hours / :diskmtbf AS 'mtbf' FROM jobstats WHERE time IN (SELECT MAX(time) FROM jobstats WHERE date = :itdate AND disk_model = :diskmodel AND disk_power_on_hours IS NOT NULL GROUP BY tagnumber)", array(':diskmtbf' => $value1["disk_mtbf"], ':itdate' => $value["date"], ':diskmodel' => $value1["disk_model"]));
            if (arrFilter($db->get()) === 0) {
                foreach ($db->get() as $key => $value2) {
                    $arrMTBF[] = $value2["mtbf"];
                }
            }
        }
        unset($value2);

        $TBW = array_sum(array_filter($arrTBW));
        $MTBF = array_sum(array_filter($arrMTBF));

    }

    if (arrFilter($arrTBW) === 0 && arrFilter($arrMTBF) === 0) {
        $diskHealth = round(100 - ((($TBW / count($arrTBW)) * 100) + (($MTBF / count($arrMTBF)) * 100)) / 2, 2);
    } elseif (arrFilter($arrTBW) === 0 && arrFilter($arrMTBF) === 1) {
        $diskHealth = round(100 - (($TBW / count($arrTBW)) * 100), 2);
    } elseif (arrFilter($arrTBW) === 1 && arrFilter($arrMTBF) === 0) {
        $diskHealth = round(100 - (($MTBF / count($arrMTBF)) * 100), 2);
    } else {
        $diskHealth = "NULL";
    }
    $db->updateSS("disk_health", $diskHealth, $value["date"]);
    unset($value1);


    #Update the average battery health by selecting the most recent distinct tagnumber
    $db->Pselect("SELECT battery_health FROM jobstats WHERE time IN (SELECT MAX(time) FROM jobstats WHERE date = :itdate AND battery_health IS NOT NULL GROUP BY tagnumber)", array(':itdate' => $value["date"]));
    if (arrFilter($db->get()) === 0) {
        foreach ($db->get() as $key => $value1) {
            if (numFilter($value1["battery_health"]) === 0) {
                $arrBatteryCharge[] = $value1["battery_health"];
            }
        }
    }
    unset($value1);

    # Get battery charge cycle stats
    $db->select("SELECT battery_model, battery_charge_cycles FROM static_battery_stats");
    if (arrFilter($db->get()) === 0) {
        foreach ($db->get() as $key => $value1) {
            $db->Pselect("SELECT battery_charge_cycles FROM jobstats WHERE time IN (SELECT MAX(time) FROM jobstats WHERE date = :itdate AND battery_model = :batterymodel GROUP BY tagnumber)", array(':itdate' => $value["date"], ':batterymodel' => $value1["battery_model"]));
            if (arrFilter($db->get()) === 0) {
                foreach ($db->get() as $key => $value2) {
                    if (numFilter($value2["battery_charge_cycles"]) === 0) {
                        $arrBatteryCycles[] = ($value2["battery_charge_cycles"] / $value1["battery_charge_cycles"]) * 100;
                    }
                }
            }
        }
    }
    unset($value1);
    unset($value2);

    $batteryCharge = array_sum(array_filter($arrBatteryCharge));
    $batteryChargeCycles = array_sum(array_filter($arrBatteryCycles));

    if (arrFilter($arrBatteryCharge) === 0 && arrFilter($arrBatteryCycles) === 0) {
        $batteryHealth = round((($batteryCharge / count($arrBatteryCharge)) + (100 - ($batteryChargeCycles / count($arrBatteryCycles)))) / 2, 2);
    } elseif (arrFilter($arrBatteryCharge) === 0 && arrFilter($arrBatteryCycles) === 1) {
        $batteryHealth = round(($batteryCharge / count($arrBatteryCharge)), 2);
    } elseif (arrFilter($arrBatteryCharge) === 1 && arrFilter($arrBatteryCycles) === 0) {
        $batteryHealth = round(100 - ($batteryChargeCycles / count($arrBatteryCycles)), 2);
    } else {
        $batteryHealth = "NULL";
    }
    $db->updateSS("battery_health", $batteryHealth, $value["date"]);

    # End the marker timer
    echo "Time taken to update " . $value["date"] . ": " . $timer->endMarker() . "s" . PHP_EOL;
}

# Stop the timer
echo "(Updated) serverstats: " . $timer->end() . " seconds" . PHP_EOL;

?>