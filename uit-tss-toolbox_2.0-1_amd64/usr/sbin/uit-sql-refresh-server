#!/usr/bin/php
<?php
/* "uit-sql-refresh-server" uses PHP to refresh the serverstats table in the mysql database. The
serverstats table is a historical aggregation of the highest level of statistics in our database. 
This script iterates through every date starting at 2023-01-09 (our first database entry) until the 
current date and updates all of the entries accordingly. */

# Connect to database and include custom functions
include('/var/lib/UIT-TSS-TOOLBOX/mysql-functions');

# Set current date and time
$dt = new DateTimeImmutable();
$date = $dt->format('Y-m-d');
$time = $dt->format('Y-m-d H:i:s.v');

# Set $oldDate to the oldest date entry in the DB.
$oldDate = "2023-01-09";

clearSQLGlobals();
clearTimeGlobals();

echo timeSinceLastMarker("start", "Updating Serverstats") . PHP_EOL;

# Iterate through all the dates between $oldDate and $date.
dbSelect("CALL iterateDate('$oldDate', '$date')");
#echo "\t" . timeSinceLastMarker(0, "Iterate All Dates: ") . PHP_EOL;
foreach ($arr as $key => $value) {

    # Set the variable $sqlDate to the iterated date.
    $sqlDate = $value["date"];

    # Start the timer that counts how much time each date takes to process.
    echo PHP_EOL;
    echo timeSinceLastMarker("markerStart", "Updating $sqlDate") . PHP_EOL;

    # If the current date does not exist in the serverstats table, then create an entry for the current date.
    dbSelectVal("SELECT date AS result FROM serverstats WHERE date = '$sqlDate'");
    if (filter($result) == 1) {
        echo "Inserting new serverstats entry for $sqlDate." . PHP_EOL;
        dbInsertSS("$sqlDate");
    }
    #echo "\t" . timeSinceLastMarker(0, "Insert Dates: ") . PHP_EOL;

    # Update laptop count. A laptop counts as a distinct tagnumber in jobstats which is in the Tech Commons.
    dbSelectVal("SELECT COUNT(DISTINCT tagnumber) AS result FROM jobstats WHERE (date BETWEEN '$oldDate' AND '$sqlDate') AND department = 'techComm'");
    dbUpdateSS("laptop_count", "$result", "$sqlDate");
    #echo "\t" . timeSinceLastMarker(0, "Laptop Count: ") . PHP_EOL;


    # Update the average time taken to clone a computer.
    dbSelectVal("SELECT ROUND(AVG(clone_time) / 60, 0) AS result FROM jobstats WHERE clone_completed = '1' AND date BETWEEN '$oldDate' AND '$sqlDate'");
    dbUpdateSS("clone_avgtime", "$result", "$sqlDate");
    #echo "\t" . timeSinceLastMarker(0, "Clone Time: ") . PHP_EOL;


    # Update the average erase time of NVMe drives
    dbSelectVal("SELECT ROUND(AVG(erase_time) / 60, 0) AS result FROM jobstats WHERE erase_completed = '1' AND (disk LIKE 'nvme%' OR disk_type = 'nvme') AND date BETWEEN '$oldDate' AND '$sqlDate'");
    dbUpdateSS("nvme_erase_avgtime", "$result", "$sqlDate");
    #echo "\t" . timeSinceLastMarker(0, "Erase Time NVMe: ") . PHP_EOL;


    # Update the average erase time of SATA drives (SSDs and HDDs)
    dbSelectVal("SELECT ROUND(AVG(erase_time) / 60, 0) AS result FROM jobstats WHERE erase_completed = '1' AND (disk LIKE 'sd%' OR disk_type = 'hdd') AND date BETWEEN '$oldDate' AND '$sqlDate'");
    dbUpdateSS("hdd_erase_avgtime", "$result", "$sqlDate");
    #echo "\t" . timeSinceLastMarker(0, "Erase Time SATA: ") . PHP_EOL;


    # Update the number of erase jobs that have completed
    dbSelectVal("SELECT COUNT(erase_completed) AS result FROM jobstats WHERE erase_completed = '1' AND date BETWEEN '$oldDate' AND '$sqlDate'");
    $eraseJobsLC = $result;
    dbUpdateSS("erase_jobs", "$result", "$sqlDate");
    #echo "\t" . timeSinceLastMarker(0, "Erase Jobs: ") . PHP_EOL;


    # Update the number of clone jobs that have completed
    dbSelectVal("SELECT COUNT(clone_completed) AS result FROM jobstats WHERE clone_completed = '1' AND date BETWEEN '$oldDate' AND '$sqlDate'");
    $cloneJobsLC = $result;
    dbUpdateSS("clone_jobs", "$result", "$sqlDate");
    #echo "\t" . timeSinceLastMarker(0, "Clone Jobs: ") . PHP_EOL;


    # Update count of all jobs (erase jobs + clone jobs)
    if (filter($eraseJobsLC) == 1 || filter($cloneJobsLC) == 1) {
        $result = 0;
    } else {
        $result = $eraseJobsLC + $cloneJobsLC;
    }
    dbUpdateSS("all_jobs", "$result", "$sqlDate");
    #echo "\t" . timeSinceLastMarker(0, "All Jobs: ") . PHP_EOL;


    # Update date of last image update
    dbSelectVal("SELECT date AS result FROM jobstats WHERE clone_master = '1' AND date BETWEEN '$oldDate' AND '$sqlDate' ORDER BY time DESC LIMIT 1");
    dbUpdateSS("last_image_update", "$result", "$sqlDate");
    #echo "\t" . timeSinceLastMarker(0, "Last Image Update: ") . PHP_EOL;

    # Set $arr1
    $arr1 = array();
    # Get average TBW of non-HDD drives (writes only, SSD and NVMe included). This average takes into account drive model and specifications of the drive.
    dbSelect("SELECT disk_model,disk_type,disk_tbw,disk_tbr FROM static_disk_stats WHERE disk_type IS NOT NULL AND disk_tbw IS NOT NULL AND disk_tbr IS NOT NULL");
    foreach ($arr as $key => $value) {
        $diskModel = $value["disk_model"];
        $diskType = $value["disk_type"];
        $diskMaxTBW = $value["disk_tbw"];
        $diskMaxTBR = $value["disk_tbr"];
        if ($diskType == "hdd") {
            $sql = "SELECT (((AVG(disk_writes) / '$diskMaxTBW') + (AVG(disk_reads) / '$diskMaxTBR')) * 100) / 2 AS result FROM jobstats WHERE ";
            $sql .= "time IN (SELECT MAX(time) FROM jobstats WHERE date BETWEEN '$oldDate' AND '$sqlDate' ";
            $sql .= "AND disk_writes IS NOT NULL AND disk_reads IS NOT NULL AND disk_model = '$diskModel' GROUP BY tagnumber)";
        } else {
            $sql = "SELECT (AVG(disk_writes) / '$diskMaxTBW') * 100 AS result FROM jobstats WHERE time IN (SELECT MAX(time) FROM jobstats WHERE ";
            $sql .= "date BETWEEN '$oldDate' AND '$sqlDate' AND disk_writes IS NOT NULL AND disk_model = '$diskModel' GROUP BY tagnumber)";
        }
        dbSelectVal($sql);
        if (filter($result) == 0) {
            array_push($arr1, $result);
        }
    }


    # Get the average disk power on hours (MTBF/MTTF) and average that against the disk's specifications.
    $arr2 = array();
    dbSelect("SELECT disk_model,disk_mtbf FROM static_disk_stats WHERE disk_mtbf IS NOT NULL");
    foreach ($arr as $key => $value) {
        $diskModel = $value["disk_model"];
        $diskMaxMTBF = $value["disk_mtbf"];
        # Select the most recent distinct tagnumber from jobstats
        $sql = "SELECT AVG(disk_power_on_hours) AS result FROM jobstats WHERE ";
        $sql .= "time IN (SELECT MAX(time) FROM jobstats WHERE date BETWEEN '$oldDate' AND '$sqlDate' AND disk_model = '$diskModel' ";
        $sql .= "AND disk_power_on_hours IS NOT NULL GROUP BY tagnumber)";
        dbSelectVal($sql);
        $result = ($result / $diskMaxMTBF) * 100;
        if (filter($result) == 0) {
            array_push($arr2, $result);
        }
    }
    
    $arr1 = array_filter($arr1);
    $diskTBW = array_sum($arr1);
    $arr2 = array_filter($arr2);
    $diskMTBF = array_sum($arr2);
    if (filter($arr1) == 0 && count($arr1) > 0 && filter($arr2) == 0 && count($arr2) > 0) {
        $diskHealth = round(100 - (($diskMTBF + $diskTBW) / 2), 2);
    } elseif (filter($arr1) == 0 && count($arr1) > 0 && filter($arr2) == 0 && count($arr2) == 0) {
        $diskHealth = round(100 - $diskTBW, 2);
    } else {
        $diskHealth = "NULL";
    }
    dbUpdateSS("disk_health", "$diskHealth", "$sqlDate");


    #Update the average battery health by selecting the most recent distinct tagnumber
    $sql = "SELECT AVG(battery_health) AS result FROM jobstats WHERE time IN (SELECT MAX(time) FROM jobstats WHERE date BETWEEN '$oldDate' AND '$sqlDate' ";
    $sql .= "AND battery_health IS NOT NULL GROUP BY tagnumber)";
    dbSelectVal($sql);
    if (filter($result) == 0 && $result > 0) {
        $batteryCharge = $result;
    } else {
        $batteryCharge = 0;
    }

    # Get battery charge cycle stats
    $arr3 = array();
    dbSelect("SELECT battery_model,battery_charge_cycles FROM static_battery_stats");
    foreach ($arr as $key => $value) {
        $batteryMaxChargeCycles = $value["battery_charge_cycles"];
        $batteryName = $value["battery_model"];
        # Select the most recent distinct tagnumber from jobstats
        $sql = "SELECT AVG(battery_charge_cycles) AS result FROM jobstats WHERE time IN (SELECT MAX(time) FROM jobstats WHERE date BETWEEN '$oldDate' AND '$sqlDate' ";
        $sql .= "AND battery_charge_cycles IS NOT NULL AND battery_model = '$batteryName' GROUP BY tagnumber)";
        dbSelectVal($sql);
        if (filter($result) == 0 && $result > 0) {
            $result = ($result / $batteryMaxChargeCycles) * 100;
            array_push($arr3, $result);
        }
    }

    $arr3 = array_filter($arr3);
    $batteryChargeCycles = array_sum($arr3);
    if (filter($arr3) == 0 && count($arr3) > 0) {
        $batteryHealth = round((($batteryChargeCycles + $batteryCharge) / 2), 2);
    } elseif (filter($arr3) == 0 && count($arr3) > 0 && (filter($batteryChargeCycles) == 1 || $batteryChargeCycles == 0)) {
        $batteryHealth = round($batteryCharge, 2);
    } else {
        $batteryHealth = "NULL";
    }
    dbUpdateSS("battery_health", "$batteryHealth", "$sqlDate");


    # Output time taken for specific date
    #$end = hrtime(true);
    #$executionTime = round(($end - $start) / 1e9, 4);
    #echo "Updated serverstats for $sqlDate: " . $executionTime . " seconds" . PHP_EOL;
    echo timeSinceLastMarker("markerEnd", "Time Taken for $sqlDate: ") . PHP_EOL;
}

echo timeSinceLastMarker("end", "Total Time to Update Serverstats: ") . PHP_EOL;

clearSQLGlobals();
clearTimeGlobals();

?>