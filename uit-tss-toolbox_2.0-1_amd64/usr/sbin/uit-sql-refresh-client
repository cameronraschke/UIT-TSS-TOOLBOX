#!/usr/bin/php
<?php
# Connect to database and include custom functions
include('/var/lib/UIT-TSS-TOOLBOX/include.php');

$timer = new scriptTimer();

echo "Updating clientstats" . PHP_EOL;
$timer->start();


/* # Get stdin
$stdin = fopen('php://stdin', 'r');
$line = trim(fgets(STDIN));
fclose($stdin);
# If stdin matches regex, then update that tagnumber, else update all tagnumbers.
if (preg_match("/[0-9]{6}/", $line)) {
# Iterate through distinct computers in the Tech Commons by tagnumber.
dbSelect("SELECT DISTINCT tagnumber FROM jobstats WHERE tagnumber = '$line' AND department = 'techComm' AND tagnumber IS NOT NULL");
} else {
# Iterate through distinct computers in the Tech Commons by tagnumber.
dbSelect("SELECT DISTINCT tagnumber FROM jobstats WHERE department = 'techComm' AND tagnumber IS NOT NULL");
} */

$db = new db();

$db->select("SELECT
    jobstats.tagnumber,
    t1.department, t2.department_readable,
    system_data.system_model,
    jobstats.bios_version, bios_stats.bios_updated,
    jobstats.system_serial, 
    static_disk_stats.disk_type,
    (CASE
      WHEN static_disk_stats.disk_type = 'hdd' AND static_disk_stats.disk_tbw IS NOT NULL AND static_disk_stats.disk_mtbf IS NOT NULL THEN ROUND(100 - (((((jobstats.disk_reads + jobstats.disk_writes) / static_disk_stats.disk_tbw) + (jobstats.disk_power_on_hours / static_disk_stats.disk_mtbf)) / 2) * 100), 2)
      WHEN static_disk_stats.disk_type = 'hdd' AND static_disk_stats.disk_tbw IS NOT NULL AND static_disk_stats.disk_mtbf IS NULL THEN ROUND(100 - (((jobstats.disk_reads + jobstats.disk_writes) / static_disk_stats.disk_tbw) * 100), 2)
      WHEN static_disk_stats.disk_type = 'hdd' AND static_disk_stats.disk_tbw IS NULL AND static_disk_stats.disk_mtbf IS NOT NULL THEN ROUND(100 - ((jobstats.disk_power_on_hours / static_disk_stats.disk_mtbf) * 100), 2)
      WHEN static_disk_stats.disk_type = 'ssd' OR static_disk_stats.disk_type = 'nvme' THEN ROUND(100 - (((((jobstats.disk_writes / static_disk_stats.disk_tbw) + (jobstats.disk_power_on_hours / static_disk_stats.disk_mtbf)) / 2) * 100)), 2)
      ELSE NULL
    END
    ) AS 'disk_health',
    (CASE
      WHEN jobstats.battery_health IS NOT NULL AND jobstats.battery_charge_cycles IS NOT NULL THEN ROUND(((jobstats.battery_health + (100 - ((jobstats.battery_charge_cycles / static_battery_stats.battery_charge_cycles) * 100))) / 2), 0)
      WHEN jobstats.battery_health IS NOT NULL AND jobstats.battery_charge_cycles IS NULL THEN ROUND((jobstats.battery_health), 0)
      WHEN jobstats.battery_health IS NULL AND jobstats.battery_charge_cycles IS NOT NULL THEN ROUND((100 - (((jobstats.battery_charge_cycles / static_battery_stats.battery_charge_cycles) * 100))), 0)
    END
    ) AS 'battery_health'
  FROM jobstats 
  LEFT JOIN (SELECT tagnumber, department FROM departments WHERE time IN (SELECT MAX(time) FROM departments GROUP BY tagnumber)) t1
  ON jobstats.tagnumber = t1.tagnumber
  INNER JOIN (SELECT department, department_readable FROM static_departments) t2
  ON t1.department = t2.department
  INNER JOIN system_data ON system_data.tagnumber = jobstats.tagnumber
  LEFT JOIN static_bios_stats ON system_data.system_model = static_bios_stats.system_model
  LEFT JOIN static_disk_stats ON jobstats.disk_model = static_disk_stats.disk_model
  LEFT JOIN static_battery_stats ON jobstats.battery_model = static_battery_stats.battery_model
  LEFT JOIN bios_stats ON jobstats.tagnumber = bios_stats.tagnumber
  WHERE 
    jobstats.tagnumber IS NOT NULL
    AND jobstats.time IN (SELECT MAX(time) FROM jobstats WHERE host_connected = 1 GROUP BY tagnumber)
  ORDER BY jobstats.time DESC");

foreach ($db->get() as $key => $value) {

  # Start the timer that counts how much time each tagnumber takes to process.
  echo PHP_EOL;
  $timer->startMarker();

  # If tagnumber does not exist in the clientstats table, insert it.
  $db->select("SELECT tagnumber FROM clientstats WHERE tagnumber = '" . $value["tagnumber"] . "'");
  if (is_array($db->get()) === FALSE) {
    echo "Inserting laptop: " . $value["tagnumber"] . PHP_EOL;
    $db->insertCS($value["tagnumber"]);
  }

  # Update the system model
  $db->updateCS("system_model", $value["system_model"], $value["tagnumber"]);

  # Update the system serial number
  $db->updateCS("system_serial", $value["system_serial"], $value["tagnumber"]);

  # Update the most recent average erase times for each client
  $db->select("SELECT ROUND(AVG(t1.erase_time) / 60, 0) AS 'result' FROM (SELECT erase_time FROM jobstats WHERE erase_completed = 1 AND tagnumber = '" . $value["tagnumber"] . "' ORDER BY time DESC LIMIT 3) t1;");
  if (arrFilter($db->get()) == 0) {
    foreach ($db->get() as $value1) {
      $db->updateCS("erase_avgtime", $value1["result"], $value["tagnumber"]);
    }
  }
  unset($value1);

  # Update the most recent average clone time for each client
  $db->select("SELECT ROUND(AVG(t1.clone_time) / 60, 0) AS 'result' FROM (SELECT clone_time FROM jobstats WHERE clone_completed = 1 AND tagnumber = '" . $value["tagnumber"] . "' ORDER BY time DESC LIMIT 3) t1;");
  if (arrFilter($db->get()) == 0) {
    foreach ($db->get() as $key => $value1) {
      $db->updateCS("clone_avgtime", $value1["result"], $value["tagnumber"]);
    }
  }
  unset($value1);

  # Update count of total jobs. Total jobs count as every entry of clone_completed or erase_completed equal to "Yes" - One entry can be up to two jobs (clone + erase job).
  $db->select("SELECT COUNT(tagnumber) AS 'result' FROM jobstats WHERE tagnumber = '" . $value["tagnumber"] . "' AND (erase_completed = '1' OR clone_completed = '1')");
  if (arrFilter($db->get()) == 0) {
    foreach ($db->get() as $key => $value1) {
      $db->updateCS("all_jobs", $value1["result"], $value["tagnumber"]);
    }
  }
  unset($value1);

  # Disk Type
  $db->updateCS("disk_type", $value["disk_type"], $value["tagnumber"]);

  # Disk Health
  $db->updateCS("disk_health", $value["disk_health"], $value["tagnumber"]);

  # Update battery health
  $db->updateCS("battery_health", $value["battery_health"], $value["tagnumber"]);

  # Update the time of the last job (assumed techComm UUIDs because of the iterated values) and the time of the last job.
  $db->select("SELECT time AS 'result'
    FROM jobstats
    WHERE tagnumber = '" . $value["tagnumber"] . "'
    AND (erase_completed = 1 OR clone_completed = 1)
    AND jobstats.tagnumber IS NOT NULL
    ORDER BY time DESC
    LIMIT 1");
  if (arrFilter($db->get()) == 0) {
    foreach ($db->get() as $key => $value1) {
      $db->updateCS("last_job_time", $value1["result"], $value["tagnumber"]);
    }
  }
  unset($value1);

  # End the marker timer
  echo "Time taken to update " . $value["tagnumber"] . ": " . $timer->endMarker() . "s" . PHP_EOL;
}

# Stop the timer
echo "(Updated) clientstats: " . $timer->end() . " seconds" . PHP_EOL;

?>