#!/usr/bin/php
<?php
# Connect to database and include custom functions
include('/var/lib/UIT-TSS-TOOLBOX/functions.php');
include('/var/lib/UIT-TSS-TOOLBOX/include.php');


echo timeSinceLastMarker("start", "Updating clientstats") . PHP_EOL;

/* # Get stdin
$stdin = fopen('php://stdin', 'r');
$line = trim(fgets(STDIN));
fclose($stdin);
# If stdin matches regex, then update that tagnumber, else update all tagnumbers.
if (preg_match("/[0-9]{6}/", $line)) {
    # Iterate through distinct computers in the Tech Commons by tagnumber.
    dbSelect("SELECT DISTINCT tagnumber FROM jobstats WHERE tagnumber = '$line' AND department = 'techComm' AND tagnumber IS NOT NULL");
} else {
    # Iterate through distinct computers in the Tech Commons by tagnumber.
    dbSelect("SELECT DISTINCT tagnumber FROM jobstats WHERE department = 'techComm' AND tagnumber IS NOT NULL");
} */

$db = new db();

$db->select("SELECT tagnumber FROM jobstats WHERE time IN (SELECT MAX(time) FROM jobstats WHERE department IS NOT NULL AND tagnumber IS NOT NULL GROUP BY tagnumber) AND department IS NOT NULL AND department = 'techComm' GROUP BY tagnumber");
foreach ($db->get() as $key => $value) {

    # Start the timer that counts how much time each tagnumber takes to process.
    echo PHP_EOL;
    echo timeSinceLastMarker("markerStart", "Updating:" . $value["tagnumber"]) . PHP_EOL;

    # If tagnumber does not exist in the clientstats table, insert it.
    $db->select("SELECT tagnumber AS 'result' FROM clientstats WHERE tagnumber = '" . $value["tagnumber"] . "'");
    foreach ($db->get() as $key => $value1)
    if (strFilter($value1["result"]) == 1) {
        echo "Inserting laptop: " . $value1["tagnumber"] . PHP_EOL;
        $db->insertCS($value1["tagnumber"]);
    }
    unset($value1);

    # Update the BIOS version and system model
    $db->select("SELECT t1.bios_version, t2.system_model FROM jobstats t1 INNER JOIN system_data t2 ON t1.tagnumber = t2.tagnumber WHERE t1.bios_version IS NOT NULL AND t2.system_model IS NOT NULL AND t1.tagnumber = '" . $value["tagnumber"] . "' ORDER BY t1.time DESC LIMIT 1");
    foreach ($db->get() as $key => $value1) {

        $db->updateCS("system_model", $value1["system_model"], $value["tagnumber"]);

        $db->select("SELECT bios_version FROM static_bios_stats WHERE system_model = '" . $value1["system_model"] . "'");
        foreach ($db->get() as $key => $value2) {
            if ($value2["bios_version"] == $value1["bios_version"]) {
                $biosBool = 1;
            } else {
                $biosBool = 0;
            }
        }

        $db->updateCS("bios_updated", $biosBool, $value["tagnumber"]);
    }
    unset($value1);
    unset($value2);
    unset($biosBool);

    # Update the system serial number
    $db->select("SELECT system_serial FROM jobstats WHERE tagnumber = '" . $value["tagnumber"] . "' AND system_serial IS NOT NULL ORDER BY time DESC LIMIT 1");
    foreach ($db->get() as $key => $value1) {
        $db->updateCS("system_serial", $value1["system_serial"], $value["tagnumber"]);
    }
    unset($value1);

    # Update the most recent average erase times for each client
    $db->select("SELECT ROUND(AVG(erase_time) / 60, 0) AS 'result' FROM jobstats WHERE erase_completed = '1' AND tagnumber = '" . $value["tagnumber"] . "' ORDER BY TIME DESC LIMIT 3");
    foreach ($db->get() as $value1) {
        $db->updateCS("erase_avgtime", $value1["result"], $value["tagnumber"]);
    }
    unset($value1);

    # Update the most recent average clone time for each client
    $db->select("SELECT ROUND(AVG(clone_time) / 60, 0) AS 'result' FROM jobstats WHERE clone_completed = '1' AND tagnumber = '" . $value["tagnumber"] . "' ORDER BY TIME DESC LIMIT 3");
    foreach ($db->get() as $key => $value1) {
        $db->updateCS("clone_avgtime", $value1["result"], $value["tagnumber"]);
    }
    unset($value1);

    # Update count of total jobs. Total jobs count as every entry of clone_completed or erase_completed equal to "Yes" - One entry can be up to two jobs (clone + erase job).
    $db->select("SELECT COUNT(tagnumber) AS 'result' FROM jobstats WHERE tagnumber = '" . $value["tagnumber"] . "' AND (erase_completed = '1' OR clone_completed = '1')");
    foreach ($db->get() as $key => $value1) {
        $db->updateCS("all_jobs", $value1["result"], $value["tagnumber"]);
    }
    unset($value1);

    # Disk Health
    # Get disk model of the client.
    $db->select("SELECT disk_model, disk_writes, disk_reads, disk_power_on_hours FROM jobstats WHERE tagnumber = '" . $value["tagnumber"] . "' AND disk_model IS NOT NULL AND disk_writes IS NOT NULL ORDER BY time LIMIT 1");
    if (arrFilter($db->get()) == 1) {
        $diskHealth = "NULL";
    } else {
        foreach ($db->get() as $key => $value1) {
        $diskHealth = 0;
        $diskHealthMTBF = 0;

            $db->select("SELECT disk_type, disk_tbw, disk_tbr, disk_mtbf FROM static_disk_stats WHERE disk_model = '" . $value1["disk_model"] . "'");
            foreach ($db->get() as $key => $value2) {

                $db->updateCS("disk_type", $value2["disk_type"], $value["tagnumber"]);

                if ($value2["disk_type"] === "hdd") {
                    if (numFilter($value1["disk_writes"]) == 0 && numFilter($value2["disk_tbw"]) == 0 && numFilter($value1["disk_reads"]) == 0 && numFilter($value2["disk_tbr"]) == 0) {
                        if ($value2["disk_tbw"] == $value2["disk_tbr"]) {
                            $diskHealthTBW = ($value1["disk_writes"] + $value1["disk_reads"]) / $value2["disk_tbw"];
                        } else {
                            $diskHealthTBW = (($value1["disk_writes"] / $value2["disk_tbw"]) + ($value1["disk_reads"] / $value2["disk_tbr"])) / 2;
                        }
                    } else {
                        $diskHealthTBW = 0;
                    }
                } elseif ($value2["disk_type"] === "ssd" || $value2["disk_type"] === "nvme") {
                    if (numFilter($value1["disk_writes"]) == 0 && numFilter($value2["disk_tbw"]) == 0) {
                        $diskHealthTBW = $value1["disk_writes"] / $value2["disk_tbw"];
                    } else {
                        $diskHealthTBW = 0;
                    }
                } else {
                    $diskHealthTBW = 0;
                }

                if (numFilter($value1["disk_power_on_hours"]) == 0 && numFilter($value2["disk_mtbf"]) == 0) {
                    $diskHealthMTBF = $value1["disk_power_on_hours"] / $value2["disk_mtbf"];
                } else {
                    $diskHealthMTBF = 0;
                }
            }
        }
    }

    # Multiply the disk TBW by the disk MTBF to get a general disk health percent;
    if ($diskHealth == "NULL") {
        $diskHealth = "NULL";
    } elseif (filterNum($diskHealthTBW) == 0 && filterNum($diskHealthMTBF) == 0) {
        $diskHealth = round(100 - ((($diskHealthTBW + $diskHealthMTBF) / 2) * 100), 2);
    } elseif (filterNum($diskHealthTBW) == 0 && filterNum($diskHealthMTBF) == 1) {
        $diskHealth = round(100 - ($diskHealthTBW * 100), 2);
    } elseif (filterNum($diskHealthTBW) == 1 && filterNum($diskHealthMTBF) == 0) {
        $diskHealth = round(100 - ($diskHealthMTBF * 100), 2);
    } else {
        $diskHealth = "NULL";
    }

    if (numFilter($diskHealth) == 0) {
        $db->updateCS("disk_health", $diskHealth, $value["tagnumber"]);
    }
    unset($value1);
    unset($value2);
    unset($diskHealth);
    unset($diskHealthTBW);
    unset($diskHealthMTBF);


    # Update battery health as a percentage
    $db->select("SELECT battery_model FROM jobstats WHERE tagnumber = '" . $value["tagnumber"] . "' AND battery_model IS NOT NULL ORDER BY time DESC LIMIT 1");
    foreach ($db->get() as $key => $value1) {
        $batteryModel = $value1["battery_model"];
    }
    unset($value1);

    dbSelectVal("SELECT battery_health FROM jobstats WHERE tagnumber = '" . $value["tagnumber"] . "' AND battery_health IS NOT NULL ORDER BY time DESC LIMIT 1");
    foreach ($db->get() as $key => $value1) {
        $batteryCharge = $value1["battery_health"];
    }
    unset($value1);
    
    dbSelectVal("SELECT battery_charge_cycles FROM jobstats WHERE tagnumber = '" . $value["tagnumber"] . "' AND battery_health IS NOT NULL ORDER BY time DESC LIMIT 1");
    foreach ($db->get() as $key => $value1) {
        $batteryCycles = $value1["battery_charge_cycles"];
    }
    unset($value1);

    dbSelectVal("SELECT battery_charge_cycles FROM static_battery_stats WHERE battery_model = '" . $batteryModel . "'");
    foreach ($db->get() as $key => $value1) {
        $batteryMaxCycles = $value1["battery_charge_cycles"];
    }
    unset($value1);

    if (numFilter($batteryCharge) == 0 && numFilter($batteryCycles) == 0 && numFilter($batteryMaxCycles) == 0) { 
        $batteryHealth = round(($batteryCharge + (100 - (($batteryCycles / $batteryMaxCycles) * 100))) / 2, 0);
    } elseif (numFilter($batteryCharge) == 0 && (numFilter($batteryCycles) == 1 || numFilter($batteryMaxCycles) == 1)) {
        $batteryHealth = round($batteryCharge, 2);
    } elseif (numFilter($batteryCharge) == 1 && numFilter($batteryCycles) == 0 && numFilter($batteryMaxCycles) == 0) {
        $batteryHealth = round(100 - ((($batteryCycles / $batteryMaxCycles) * 100)), 0);
    } else {
        $batteryHealth = "NULL";
    }
    if (numFilter($batteryHealth) == 0) {
        $db->updateCS("battery_health", $batteryHealth, $value["tagnumber"]);
    }
    unset($batteryModel);
    unset($batteryCharge);
    unset($batteryCycles);
    unset($batteryMaxCycles);
    unset($batteryHealth);

    # Update the time of the last job (assumed techComm UUIDs because of the iterated values) and the time of the last job.
    $db->select("SELECT IF (host_connected='1', time, substring(date, 1, 10)) AS 'result' FROM jobstats WHERE department = 'techComm' AND tagnumber = '" . $value["tagnumber"] . "' ORDER BY time DESC LIMIT 1");
    $db->updateCS("last_job_time", "$result", $value["tagnumber"]);

    # End the marker timer
    echo timeSinceLastMarker("markerEnd", "Time Taken for " . $value["tagnumber"] . ": ") . PHP_EOL;
}

# Stop the timer
echo timeSinceLastMarker("end", "Total Time to Update clientstats: ") . PHP_EOL;

?>