#!/usr/bin/php
<?php
# Connect to database and include custom functions
include('/var/lib/UIT-TSS-TOOLBOX/mysql-functions');

# Set current date and time
$dt = new DateTimeImmutable();
$date = $dt->format('Y-m-d');
$time = $dt->format('Y-m-d H:i:s.v');

# Clear globals
clearSQLGlobals();
clearTimeGlobals();

echo timeSinceLastMarker("start", "Updating clientstats") . PHP_EOL;

/* # Get stdin
$stdin = fopen('php://stdin', 'r');
$line = trim(fgets(STDIN));
fclose($stdin);
# If stdin matches regex, then update that tagnumber, else update all tagnumbers.
if (preg_match("/[0-9]{6}/", $line)) {
    # Iterate through distinct computers in the Tech Commons by tagnumber.
    dbSelect("SELECT DISTINCT tagnumber FROM jobstats WHERE tagnumber = '$line' AND department = 'techComm' AND tagnumber IS NOT NULL");
} else {
    # Iterate through distinct computers in the Tech Commons by tagnumber.
    dbSelect("SELECT DISTINCT tagnumber FROM jobstats WHERE department = 'techComm' AND tagnumber IS NOT NULL");
} */

dbSelect("SELECT tagnumber FROM jobstats WHERE department = 'techComm' AND tagnumber IS NOT NULL GROUP BY tagnumber");
foreach ($arr as $key => $value) {
    # Set $tagNum to the iterated tagnumber.
    $tagNum = $value["tagnumber"];

    # Start the timer that counts how much time each tagnumber takes to process.
    echo PHP_EOL;
    echo timeSinceLastMarker("markerStart", "Updating $tagNum") . PHP_EOL;

    # If tagnumber does not exist in the clientstats table, insert it.
    dbSelectVal("SELECT tagnumber AS result FROM clientstats WHERE tagnumber = '$tagNum'");
    if (filter($result) == 1) {
        echo "Inserting laptop: " . $tagNum . PHP_EOL;
        dbInsertCS("$tagNum");
    }

    # Update the BIOS version
    dbSelectVal("SELECT bios_version AS result FROM jobstats WHERE tagnumber = '$tagNum' AND bios_version IS NOT NULL ORDER BY time DESC LIMIT 1");
    dbUpdateCS("bios_version", "$result", "$tagNum");

    # Update the system model
    dbSelectVal("SELECT system_model AS result FROM jobstats WHERE tagnumber = '$tagNum' AND system_model IS NOT NULL ORDER BY time DESC LIMIT 1");
    dbUpdateCS("system_model", "$result", "$tagNum");

    # Update the system serial number
    dbSelectVal("SELECT system_serial AS result FROM jobstats WHERE tagnumber = '$tagNum' AND system_serial IS NOT NULL ORDER BY time DESC LIMIT 1");
    dbUpdateCS("system_serial", "$result", "$tagNum");

    # Update the most recent average erase times for each client
    $sql = "SELECT ROUND(AVG(erase_time) / 60, 0) AS result FROM jobstats AS time1 INNER JOIN (SELECT time FROM jobstats WHERE erase_completed = '1' ";
    $sql .= "AND tagnumber = '$tagNum' ORDER BY TIME DESC LIMIT 3) AS time2 ON time1.time = time2.time";
    dbSelectVal($sql);
    dbUpdateCS("erase_avgtime", "$result", "$tagNum");

    # Update the most recent average clone time for each client
    $sql = "SELECT ROUND(AVG(clone_time) / 60, 0) AS result FROM jobstats AS time1 INNER JOIN (SELECT time FROM jobstats WHERE clone_completed = '1' ";
    $sql .= "AND clone_master IS NULL AND tagnumber = '$tagNum' ORDER BY TIME DESC LIMIT 3) AS time2 ON time1.time = time2.time";
    dbSelectVal($sql);
    dbUpdateCS("clone_avgtime", "$result", "$tagNum");

    # Update count of total jobs. Total jobs count as every entry of clone_completed or erase_completed equal to "Yes" - One entry can be up to two jobs (clone + erase job).
    dbSelectVal("SELECT COUNT(tagnumber) AS result FROM jobstats WHERE tagnumber = '$tagNum' AND clone_completed = '1'");
    $cloneLineCount = $result;
    dbSelectVal("SELECT COUNT(tagnumber) AS result FROM jobstats WHERE tagnumber = '$tagNum' AND erase_completed = '1'");
    $eraseLineCount = $result;
    $allLineCount = $cloneLineCount + $eraseLineCount;
    dbUpdateCS("all_jobs", "$allLineCount", "$tagNum");

    # Disk Health
    # Get disk model of the client.
    dbSelect("SELECT disk_model,disk_writes,disk_reads,disk_power_on_hours FROM jobstats WHERE tagnumber = '$tagNum' AND disk_model IS NOT NULL AND disk_writes IS NOT NULL ORDER BY time LIMIT 1");
    if (filterArr($arr) == 1) {
        $diskHealth = "NULL";
    } else {
        foreach ($arr as $key => $value) {
            $diskHealth = null;

            $diskModel = $value["disk_model"];
            $diskTBW = $value["disk_writes"];
            $diskTBR = $value["disk_reads"];
            $diskMTBF = $value["disk_power_on_hours"];

            dbSelect("SELECT disk_type,disk_tbw,disk_tbr,disk_mtbf FROM static_disk_stats WHERE disk_model = '$diskModel'");
            foreach ($arr as $key => $value) {
                $diskType = $value["disk_type"];
                $diskMaxTBW = $value["disk_tbw"];
                $diskMaxTBR = $value["disk_tbr"];
                $diskMaxMTBF = $value["disk_mtbf"];
            }

            dbUpdateCS("disk_type", "$diskType", "$tagNum");

            if ($diskType == "hdd") {
                if (filterNum($diskTBW) == 0 && filterNum($diskMaxTBW) == 0 && filterNum($diskTBR) == 0 && filterNum($diskMaxTBR) == 0) {
                    if ($diskMaxTBW == $diskMaxTBR) {
                        $diskHealthTBW = ($diskTBW + $diskTBR) / $diskMaxTBW;
                    } else {
                        $diskHealthTBW = (($diskTBW / $diskMaxTBW) + ($diskTBR / $diskMaxTBR)) / 2;
                    }
                } else {
                    $diskHealthTBW = 0;
                }
            } elseif ($diskType == "ssd" || $diskType == "nvme") {
                if (filterNum($diskTBW) == 0 && filterNum($diskMaxTBW) == 0) {
                    $diskHealthTBW = $diskTBW / $diskMaxTBW;
                } else {
                    $diskHealthTBW = 0;
                }
            } else {
                $diskHealthTBW = 0;
            }

            if (filterNum($diskMTBF) == 0 && filterNum($diskMaxMTBF) == 0) {
                $diskHealthMTBF = $diskMTBF / $diskMaxMTBF;
            } else {
                $diskHealthMTBF = 0;
            }
        }
    }

    # Multiply the disk TBW by the disk MTBF to get a general disk health percent;
    if ($diskHealth == "NULL") {
        $diskHealth = "NULL";
    } elseif (filterNum($diskHealthTBW) == 0 && filterNum($diskHealthMTBF) == 0) {
        $diskHealth = round(100 - ((($diskHealthTBW + $diskHealthMTBF) / 2) * 100), 2);
    } elseif (filterNum($diskHealthTBW) == 0 && filterNum($diskHealthMTBF) == 1) {
        $diskHealth = round(100 - ($diskHealthTBW * 100), 2);
    } elseif (filterNum($diskHealthTBW) == 1 && filterNum($diskHealthMTBF) == 0) {
        $diskHealth = round(100 - ($diskHealthMTBF * 100), 2);
    } else {
        $diskHealth = "NULL";
    }
    dbUpdateCS("disk_health", "$diskHealth", "$tagNum");


    # Update battery health as a percentage
    dbSelectVal("SELECT battery_model FROM jobstats WHERE tagnumber = '$tagNum' AND battery_model IS NOT NULL ORDER BY time DESC LIMIT 1");
    $batteryModel = $result;

    dbSelectVal("SELECT battery_health AS result FROM jobstats WHERE tagnumber = '$tagNum' AND battery_health IS NOT NULL ORDER BY time DESC LIMIT 1");
    $batteryCharge = $result;
    
    dbSelectVal("SELECT battery_charge_cycles AS result FROM jobstats WHERE tagnumber = '$tagNum' AND battery_health IS NOT NULL ORDER BY time DESC LIMIT 1");
    $batteryCycles = $result;

    dbSelectVal("SELECT battery_charge_cycles FROM static_battery_stats WHERE battery_model = '$batteryModel'");
    $batteryMaxCycles = $result;

    $batteryHealth = ($batteryCharge + (($batteryCycles / $batteryMaxCycles) * 100)) / 2;
    dbUpdateCS("battery_health", "$batteryHealth", "$tagNum");

    # Update the time of the last job (assumed techComm UUIDs because of the iterated values) and the time of the last job.
    dbSelectVal("SELECT time AS result FROM jobstats WHERE department = 'techComm' AND tagnumber = '$tagNum'");
    dbUpdateCS("last_job_time", "$result", "$tagNum");

    # End the marker timer
    echo timeSinceLastMarker("markerEnd", "Time Taken for $tagNum: ") . PHP_EOL;
}

# Stop the timer
echo timeSinceLastMarker("end", "Total Time to Update clientstats: ") . PHP_EOL;

# Clear globals
clearSQLGlobals();
clearTimeGlobals();

?>