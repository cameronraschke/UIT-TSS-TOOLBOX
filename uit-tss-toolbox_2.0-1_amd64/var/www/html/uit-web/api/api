//Don't forget - $ go mod init tidy; go mod init hello; go get github.com/jackc/pgx/v5; 
package main

import (
  "context"
  "fmt"
  "os"
  "io"
  "net/http"
  "log"
  "time"
  // "encoding/json"
  // "strings"
  // "database/sql"

  "github.com/jackc/pgx/v5"
)


var serverTime = time.Now()

// var (
// 	ctx context.Context
// 	db  *sql.DB
// )

var conn *pgx.Conn

func db_query() {
  dbConnString := "postgres://uitweb:WEB_SVC_PASSWD@127.0.0.1:5432/uitdb?sslmode=disable"
  conn, err := pgx.Connect(context.Background(), dbConnString)
  if err != nil {
    fmt.Fprintf(os.Stderr, "Unable to connect to database: %v\n", err)
    os.Exit(1)
  }
  //defer conn.Close(context.Background())

    sqlSlice := []string{}
    rows, _ := conn.Query(context.Background(), "SELECT 'bruh'")
    //rows, _ := db.QueryContext(ctx, "SELECT 'bruh'")
    // for key, value := range rows {
    for rows.Next() {
      var row string
      if err := rows.Scan(&row); err != nil {
			  log.Fatal(err)
		  }
      sqlSlice = append(sqlSlice, row)
      log.Print(row)
      // json.NewEncoder(w).Encode(sqlSlice)

      // if json.Valid(encodedJSON) == true {
      //   return (encodedJSON)
      // }
    }
}

func main() {
  db_query()

	apiHandler := func(w http.ResponseWriter, req *http.Request) {
		io.WriteString(w, "Hello, world!\n")
    // Flush()
	}

	http.HandleFunc("/api", apiHandler)
	log.Print("Server time: " + serverTime.Format("01-02-2006 15:04:05"))
	log.Print("Starting web server on https://localhost:8080")
	httpServerErr := http.ListenAndServeTLS(":8080", "/etc/ssl/certs/uit-web.crt", "/etc/ssl/private/uit-web.key", nil)
	log.Fatal(httpServerErr)
	if (httpServerErr != nil) {
		log.Printf("Listening on https://localhost:8080")
	}
}