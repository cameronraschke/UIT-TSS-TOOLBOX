#!/usr/bin/php
<?php
include('/var/lib/UIT-TSS-TOOLBOX/PDO-connect');
include('/var/lib/UIT-TSS-TOOLBOX/functions');

function dbSelect ($sql) {
    clearArray();
    if (filter($sql) == 0) {
        global $pdo;
        global $arr;
        $arr = array();
        $sql = $pdo->prepare($sql);
        $sql->execute();
        $arr = $sql->fetchAll(PDO::FETCH_ASSOC);
        if (filter($arr) == 1) {
            $arr = array("result"=>"NULL");
        }
    } else {
        exit();
    }
}

function dbSelectVal ($sql) {
    clearArray();
    if (filter($sql) == 0) {
        global $pdo;
        global $result;
        $arr = array();
        $sql = $pdo->prepare($sql);
        $sql->execute();
        $arr = $sql->fetchAll(PDO::FETCH_ASSOC);
        foreach ($arr as $key => $value) {
            $result = $value["result"];
        }
        if (filter($result) == 1) {
            $result = "NULL";
        }
    } else {
        exit();
    }
}

function dbInsertJob ($uuid) {
    if (filter($uuid) == 0) {
        global $pdo;
        $sql = "INSERT INTO jobstats (uuid) VALUES (:uuid)";
        $stmt = $pdo->prepare($sql);

        $stmt->bindParam(':uuid', $uuid, PDO::PARAM_STR);

        if (filter($stmt) == 0) {
            $stmt->execute();
        }
    }
}

function dbUpdateJob ($key, $value, $uuid) {
    if (filter($key) == 0 && filter($uuid) == 0) {
        global $pdo;
        $sql = "UPDATE jobstats SET $key = :value WHERE uuid = :uuid";
        $stmt = $pdo->prepare($sql);

        if (is_numeric($value) && $value <= 0) {
            $value = "NULL";
        }

        if (filter($value) == 0) {
            $stmt->bindParam(':value', $value, PDO::PARAM_STR);
            $stmt->bindParam(':uuid', $uuid, PDO::PARAM_STR);
        } else {
            $stmt->bindParam(':value', $value, PDO::PARAM_NULL);
            $stmt->bindParam(':uuid', $uuid, PDO::PARAM_STR);
        }

        if (filter($stmt) == 0) {
            $stmt->execute();
        }
    }
}

function dbInsertLocation ($time) {
    if (filter($date) == 0) {
        global $pdo;
        $sql = "INSERT INTO locations (time) VALUES (:time)";
        $stmt = $pdo->prepare($sql);

        $stmt->bindParam(':time', $time, PDO::PARAM_STR);

        if (filter($stmt) == 0) {
            $stmt->execute();
        }
    }
}

function dbUpdateLocation ($key, $value, $time) {
    if (filter($key) == 0 && filter($time) == 0) {
        global $pdo;
        $sql = "UPDATE locations SET $key = :value WHERE time = :time";
        $stmt = $pdo->prepare($sql);

        if (filter($value) == 0) {
            $stmt->bindParam(':value', $value, PDO::PARAM_STR);
            $stmt->bindParam(':time', $time, PDO::PARAM_STR);
        } else {
            $stmt->bindParam(':value', $value, PDO::PARAM_NULL);
            $stmt->bindParam(':time', $time, PDO::PARAM_STR);
        }

        if (filter($stmt) == 0) {
            $stmt->execute();
        }
    }
}

function dbUpdateLocationSerial ($serial, $tagNum) {
    if (filter($key) == 0 && filter($tagNum) == 0) {
        global $pdo;
        $sql = "UPDATE locations SET system_serial = :serial WHERE tagnumber = :tagNum";
        $stmt = $pdo->prepare($sql);

        if (filter($serial) == 0) {
            $stmt->bindParam(':serial', $serial, PDO::PARAM_STR);
            $stmt->bindParam(':tagNum', $tagNum, PDO::PARAM_STR);
        } else {
            $stmt->bindParam(':serial', $serial, PDO::PARAM_NULL);
            $stmt->bindParam(':tagNum', $tagNum, PDO::PARAM_STR);
        }

        if (filter($stmt) == 0) {
            $stmt->execute();
        }
    }
}

?>