#!/usr/bin/php
<?php
include('/var/lib/UIT-TSS-TOOLBOX/mysql-functions');

$dt = new DateTimeImmutable();
$date = $dt->format('Y-m-d');
$time = $dt->format('Y-m-d H:i:s.v');

$stdin = fopen('php://stdin', 'r');
$line = trim(fgets(STDIN));
fclose($stdin);

$arr = explode('|', $line);

if ($arr[0] == "init") {
    $uuid = $arr[1];
    $tagNum = $arr[2];
    $macAddr = $arr[3];
    $wifiMac = $arr[4];

    dbInsertJob($uuid);

    dbUpdateJob("tagnumber", "$tagNum", "$uuid");
    dbUpdateJob("etheraddress", "$macAddr", "$uuid");
    dbUpdateJob("wifi_mac", "$wifiMac", "$uuid");
    dbUpdateJob("date", "$date", "$uuid");
    dbUpdateJob("time", "$time", "$uuid");

} elseif ($arr[0] == "location") {

    if (empty($arr[7])) {
        $arr[7] = "unknown";
    }

    if ($arr[1] == "begin") {
        $tagNum = $arr[2];
        $serial = $arr[3];
        $location = "Plugged in and booted on laptop table.";
        $status = "functioning";
        $problem = "";
        $department = $arr[7];
    }

    if ($arr[1] == "end") {
        $tagNum = $arr[2];
        $serial = $arr[3];
        $location = "Finished work on laptop table.";
        $status = "functioning";
        $problem = "";
        $department = $arr[7];
    }

    if ($arr[1] == "custom") {
        $tagNum = $arr[2];
        $serial = $arr[3];
        $location = $arr[4];
        $status = $arr[5];
        $problem = $arr[6];
        $department = $arr[7];
    }

    if ($department == "1") {
        $uuid = uniqid("techComm-", true);
    } elseif ($department == "2") {
        $uuid = uniqid("shrl-", true);
    } else {
        $uuid = uniqid("location-", true);
    }
    
    #Not the same insert statement as above, ether address is DEFAULT here.
    $sql = "INSERT INTO jobstats(uuid,tagnumber,date,time) ";
    $sql .= "VALUES ('$uuid','$tagNum','$date','$time')";
    $pdo->query($sql);

    # INSERT statement
    $sql = "INSERT INTO locations(tagnumber,system_serial,location,status,problem,time) ";
    $sql .= "VALUES (:tagnumber, :system_serial, :location, :status, :problem, :time)";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':tagnumber', $tagNum, PDO::PARAM_STR);
    $stmt->bindParam(':time', $time, PDO::PARAM_STR);


    # Update empty values to NULL
    if (filter($location) == 1) {
        $stmt->bindParam(':location', $location, PDO::PARAM_NULL);
    } else {
        $stmt->bindParam(':location', $location, PDO::PARAM_STR);
    }

    if (filter($status) == 1) {
        $stmt->bindParam(':status', $status, PDO::PARAM_NULL);
    } else {
        $stmt->bindParam(':status', $status, PDO::PARAM_STR);
    }

    if (filter($problem) == 1) {
        $stmt->bindParam(':problem', $problem, PDO::PARAM_NULL);
    } else {
        $stmt->bindParam(':problem', $problem, PDO::PARAM_STR);
    }

    if (filter($serial) == 1) {
        $stmt->bindParam(':system_serial', $serial, PDO::PARAM_NULL);
    } else {
        $stmt->bindParam(':system_serial', $serial, PDO::PARAM_STR);
    }

    $stmt->execute();
    $stmt = null;

} elseif ($arr[0] == "general") {
    $key = $arr[1];
    $value = $arr[2];
    $uuid = $arr[3];

    if ($key = "cpu_temp") {
        $value = bcdiv("$value", 1000, 2);
    }

    if ($arr[4] == "nvme") {
        $value = bcmul("$value", 512, 4);
        $value = bcdiv("$value", 1000000000, 2);
    } elseif ($arr[4] == "sata") {
        $value = bcmul("$value", 512, 4);
        $value = bcdiv("$value", 1000000000000, 2);
    }

    if ($key == "disk_type") {
        if ($value == 0) {
            $value = "ssd";
        } elseif ($value == 1) {
            $value = "hdd";
        } else {
            $value = "";
        }
    }

    dbUpdateJob("$key", "$value", "$uuid");

} else {
    echo "General SQL Syntax Error, exiting";
    exit(1);
}

$pdo = null;

?>