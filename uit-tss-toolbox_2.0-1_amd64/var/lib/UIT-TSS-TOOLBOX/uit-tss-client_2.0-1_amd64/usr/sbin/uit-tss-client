#!/bin/bash

SSD_REGEX='sd.*'
NVME_REGEX='nvme.*'
SCSI_REGEX='hd.*'
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
BLUE=$(tput setaf 4)
BOLD=$(tput bold)
DIM=$(tput dim)
RESET=$(tput sgr0)
cloneElapsed="0"
shredElapsed="0"

etherAddr=$(cat /sys/class/net/e*/address | tail -n 1)
UUID=$(cat /proc/sys/kernel/random/uuid)
DATE=$(mysql --user="laptops" --password="UHouston!" --database="laptopDB" --host="10.0.0.1" -s -N --execute="SELECT date FROM serverstats ORDER BY date DESC LIMIT 1")
TIME=$(mysql --user="laptops" --password="UHouston!" --database="laptopDB" --host="10.0.0.1" -s -N --execute="SELECT time FROM serverstats ORDER BY date DESC LIMIT 1")

tput reset
echo "INSERT INTO jobstats(\
	uuid, \
	tagnumber, \
	etheraddress, \
	date, \
	time, \
	bios_vendor, \
	bios_version, \
	bios_date, \
	bios_revision, \
	bios_firmware, \
	system_manufacturer, \
	system_productname, \
	system_serial, \
	system_uuid, \
	system_sku, \
	system_family, \
	motherboard_manufacturer, \
	motherboard_serial, \
	chassis_manufacturer, \
	chassis_type, \
	chassis_serial, \
	chassis_tag, \
	chassis_psu, \
	cpu_family, \
	cpu_manufacturer, \
	cpu_id, \
	cpu_version, \
	cpu_voltage, \
	cpu_maxspeed, \
	cpu_currentspeed, \
	cpu_cores, \
	cpu_threads, \
	battery_manufacturer, \
	battery_name, \
	battery_capacity, \
	battery_voltage, \
	battery_serial, \
	battery_manufacturedate, \
	boot_errors, \
	action, \
	clone_completed, \
	erase_completed, \
	disk, \
	disksizegb, \
	reboot, \
	clone_mode, \
	clone_master, \
	erase_mode, \
	erase_diskpercent, \
	clone_server, \
	clone_sambauser, \
	clone_image, \
	clone_imageupdate, \
	all_time, \
	erase_time, \
	clone_time) \
	VALUES (\
	'${UUID}', \
	'000000', \
	'${etherAddr}', \
	'${DATE}', \
	'${TIME}', \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT, \
	DEFAULT)" | uit-tss-db
tput reset

function hardwareData {
	#t0 = BIOS
	#t1 = system
	#t2 = Base Board/Motherboard
	#t3 = Chassis
	#t4 = Processor
	#t22 = Battery
	#t32 = Boot Status
	tZeroVendor=$(dmidecode -t0 | grep 'Vendor' | sed 's/Vendor: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET bios_vendor = '${tZeroVendor}' WHERE uuid = '${UUID}'" | uit-tss-db
	tZeroBiosVersion=$(dmidecode -t0 | grep 'Version' | sed 's/Version: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET bios_version = '${tZeroBiosVersion}' WHERE uuid = '${UUID}'" | uit-tss-db
	tZeroBiosReleaseDate=$(dmidecode -t0 | grep 'Release Date' | sed 's/Release Date: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET bios_date = '${tZeroBiosReleaseDate}' WHERE uuid = '${UUID}'" | uit-tss-db
	tZeroBiosRevision=$(dmidecode -t0 | grep 'BIOS Revision' | sed 's/BIOS Revision: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET bios_revision = '${tZeroBiosRevision}' WHERE uuid = '${UUID}'" | uit-tss-db
	tZeroFirmwareRevision=$(dmidecode -t0 | grep 'Firmware Revision' | sed 's/Firmware Revision: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET bios_firmware = '${tZeroFirmwareRevision}' WHERE uuid = '${UUID}'" | uit-tss-db
	tOneManufacturer=$(dmidecode -t1 | grep 'Manufacturer' | sed 's/Manufacturer: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET system_manufacturer = '${tOneManufacturer}' WHERE uuid = '${UUID}'" | uit-tss-db
	tOneProductName=$(dmidecode -t1 | grep 'Product Name' | sed 's/Product Name: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET system_productname = '${tOneProductName}' WHERE uuid = '${UUID}'" | uit-tss-db
	tOneSerialNumber=$(dmidecode -t1 | grep 'Serial Number' | sed 's/Serial Number: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET system_serial = '${tOneSerialNumber}' WHERE uuid = '${UUID}'" | uit-tss-db
	tOneUUID=$(dmidecode -t1 | grep 'UUID' | sed 's/UUID: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET system_uuid = '${tOneUUID}' WHERE uuid = '${UUID}'" | uit-tss-db
	tOneSKU=$(dmidecode -t1 | grep 'SKU Number' | sed 's/SKU Number: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET system_sku = '${tOneSKU}' WHERE uuid = '${UUID}'" | uit-tss-db
	tOneFamily=$(dmidecode -t1 | grep 'Family' | sed 's/Family: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET system_family = '${tOneFamily}' WHERE uuid = '${UUID}'" | uit-tss-db
	tTwoManufacturer=$(dmidecode -t2 | grep 'Manufacturer' | sed 's/Manufacturer: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET motherboard_manufacturer = '${tTwoManufacturer}' WHERE uuid = '${UUID}'" | uit-tss-db
	tTwoSerialNumber=$(dmidecode -t2 | grep 'Serial Number' | sed 's/Serial Number: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET motherboard_serial = '${tTwoSerialNumber}' WHERE uuid = '${UUID}'" | uit-tss-db
	tThreeManufacturer=$(dmidecode -t3 | grep 'Manufacturer' | sed 's/Manufacturer: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET chassis_manufacturer = '${tThreeManufacturer}' WHERE uuid = '${UUID}'" | uit-tss-db
	tThreeType=$(dmidecode -t3 | grep 'Type' | sed 's/Type: //' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET chassis_type = '${tThreeType}' WHERE uuid = '${UUID}'" | uit-tss-db
	tThreeSerialNumber=$(dmidecode -t3 | grep 'Serial Number' | sed 's/Serial Number: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET chassis_serial = '${tThreeSerialNumber}' WHERE uuid = '${UUID}'" | uit-tss-db
	tThreeAssetTag=$(dmidecode -t3 | grep 'Asset Tag' | sed 's/Asset Tag: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET chassis_tag = '${tThreeAssetTag}' WHERE uuid = '${UUID}'" | uit-tss-db
	tThreePowerSupplyState=$(dmidecode -t3 | grep 'Power Supply State' | sed 's/Power Supply State: //g')
		echo "UPDATE jobstats SET chassis_psu = '${tThreePowerSupplyState}' WHERE uuid = '${UUID}'" | uit-tss-db
	tFourFamily=$(dmidecode -t4 | grep '^[[:space:]]Family' | sed 's/Family: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET cpu_family = '${tFourFamily}' WHERE uuid = '${UUID}'" | uit-tss-db
	tFourManufacturer=$(dmidecode -t4 | grep 'Manufacturer' | sed 's/Manufacturer: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET cpu_manufacturer = '${tFourManufacturer}' WHERE uuid = '${UUID}'" | uit-tss-db
	tFourID=$(dmidecode -t4 | grep 'ID' | sed 's/ID: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET cpu_id = '${tFourID}' WHERE uuid = '${UUID}'" | uit-tss-db
	tFourVersion=$(dmidecode -t4 | grep 'Version' | sed 's/Version: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET cpu_version = '${tFourVersion}' WHERE uuid = '${UUID}'" | uit-tss-db
	tFourVoltage=$(dmidecode -t4 | grep 'Voltage' | sed 's/Voltage: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET cpu_voltage = '${tFourVoltage}' WHERE uuid = '${UUID}'" | uit-tss-db
	tFourMaxSpeed=$(dmidecode -t4 | grep 'Max Speed' | sed 's/Max Speed: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET cpu_maxspeed = '${tFourMaxSpeed}' WHERE uuid = '${UUID}'" | uit-tss-db
	tFourCurrentSpeed=$(dmidecode -t4 | grep 'Current Speed' | sed 's/Current Speed: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET cpu_currentspeed = '${tFourCurrentSpeed}' WHERE uuid = '${UUID}'" | uit-tss-db
	tFourCoreCount=$(dmidecode -t4 | grep 'Core Count' | sed 's/Core Count: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET cpu_cores = '${tFourCoreCount}' WHERE uuid = '${UUID}'" | uit-tss-db
	tFourThreadCount=$(dmidecode -t4 | grep 'Thread Count' | sed 's/Thread Count: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET cpu_threads = '${tFourThreadCount}' WHERE uuid = '${UUID}'" | uit-tss-db
	tTwentyTwoManufacturer=$(dmidecode -t22 | grep 'Manufacturer' | sed 's/Manufacturer: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET battery_manufacturer = '${tTwentyTwoManufacturer}' WHERE uuid = '${UUID}'" | uit-tss-db
	tTwentyTwoName=$(dmidecode -t22 | grep 'Name' | sed 's/Name: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET battery_name = '${tTwentyTwoName}' WHERE uuid = '${UUID}'" | uit-tss-db
	tTwentyTwoCapacity=$(dmidecode -t22 | grep 'Design Capacity' | sed 's/Design Capacity: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET battery_capacity = '${tTwentyTwoCapacity}' WHERE uuid = '${UUID}'" | uit-tss-db
	tTwentyTwoVoltage=$(dmidecode -t22 | grep 'Design Voltage' | sed 's/Design Voltage: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET battery_voltage = '${tTwentyTwoVoltage}' WHERE uuid = '${UUID}'" | uit-tss-db
	tTwentyTwoSerialNumber=$(dmidecode -t22 | grep 'SBDS Serial Number' | sed 's/SBDS Serial Number: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET battery_serial = '${tTwentyTwoSerialNumber}' WHERE uuid = '${UUID}'" | uit-tss-db
	tTwentyTwoManufactureDate=$(dmidecode -t22 | grep 'SBDS Manufacture Date' | sed 's/SBDS Manufacture Date: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET battery_manufacturedate = '${tTwentyTwoManufactureDate}' WHERE uuid = '${UUID}'" | uit-tss-db
	tThirtyTwoBootStatus=$(dmidecode -t32 | grep 'Status' | sed 's/Status: //g' | sed 's/^[[:space:]]*//g')
		echo "UPDATE jobstats SET boot_errors = '${tThirtyTwoBootStatus}' WHERE uuid = '${UUID}'" | uit-tss-db
}

function info {
	if [[ $ACTION != "" ]]; then
		echo "The selected mode is ${BOLD}${ACTION}${RESET}"
	fi

	if [[ $CLIENTDISK != "" ]]; then
		echo "The selected disk is ${BOLD}${CLIENTDISK}${RESET}"
	fi

	if [[ $cloneMode != "" ]]; then
		echo "The selected clone mode is ${BOLD}${cloneMode}${RESET}"
	fi

	echo ""
}



function exitMessage {
	lines=$(tput lines)
	tput reset
	tput cup $(( lines - 5 ))
	echo "${DIM}Press ${BOLD}${BLUE}CTRL + C${RESET}${DIM} at any time to exit UIT-TSS-TOOLBOX${RESET}"
	echo "${DIM}If you have exited UIT-TSS-TOOLBOX and you want to restart it, press ${BOLD}${BLUE}CTRL + D${RESET}"
	echo ""
	echo "${DIM}UIT-TSS-TOOLBOX by ${RESET}Cameron Raschke${DIM} (caraschke@uh.edu). ${RESET}${RED}Go coogs!!${RESET}"
	tput cup 0 0
	echo ""
	info
}



function intro {
	echo "${RESET}"
	exitMessage
	echo -n "${RESET}UIT-TSS-TOOLBOX by ${BOLD}Cameron Raschke${RESET} ${DIM}(caraschke@uh.edu)${RESET}${BOLD}. "
	echo "${BOLD}${RED}Go coogs!!${RESET}"
	echo ""
	echo ""
	tput bold
	tput setaf 1
	echo "| |    | |  | |     | |"
	echo "| |    | |  | |_____| |"
	echo "| |    | |  | |_____| |"
	echo "| |____| |  | |     | |"
	echo "\________/  | |     | |"
	tput sgr0
	echo ""
	echo "------------------------------"
	echo ""
	echo "Checklist:"
	echo "${BOLD}-General best practices${RESET} "
	echo "   * Sanitize laptops with cleaner before imaging them."
	echo "   * Reset BIOS to default/factory settings before imaging."
	echo "${BOLD}-Physical connections${RESET} "
	echo "   * Make sure that power and ethernet are plugged in to the client."
	echo "   * Do not use Secure Erase on USB drives or drives connected over USB."
	echo "      * Autodetect mode and NIST 800-88r1 mode can both do Secure Erase."
	echo "${BOLD}-Dells${RESET} "
	echo "   * Make sure SATA mode is in AHCI mode and not RAID mode."
	echo "      * This is usually under \"System Configuration\" or \"Storage\" in BIOS."
	echo "      * Every Dell is in RAID mode by default."
	echo "      * If you reset BIOS, make sure you change SATA mode to AHCI after the reset."
	echo ""
	echo "${BOLD}Please remove the thumb drive and press one select one of the following keys:${RESET} "
	echo "   ${BLUE}[1]${RESET} ${BOLD}Clone ${DIM}(server -> laptop)${RESET}${BOLD} an HP laptop${RESET}"
	echo "   ${BLUE}[2]${RESET} ${BOLD}Clone ${DIM}(server -> laptop)${RESET}${BOLD} a SMALL Dell laptop${RESET}"
	echo "   ${BLUE}[3]${RESET} ${BOLD}Clone ${DIM}(server -> laptop)${RESET}${BOLD} a BIG Dell laptop${RESET}"
	echo "   ${BLUE}[4]${RESET} ${BOLD}Simple erase NVME${RESET}"
	echo "   ${BLUE}[5]${RESET} ${BOLD}Simple erase SATA${RESET}"
	echo "   ${BLUE}[6]${RESET} ${BOLD}Other options${RESET} ${DIM}(advanced)${RESET}"
	read -n 1 -p "Select [1-6]: " mainMenuOpt

	tput reset
}



function powerWarning {
	exitMessage
	echo "${BOLD}${RED}*** WARNING ***${RESET}"
	echo "${BOLD}After pressing ${BLUE}[1]${RESET}${BOLD}, the system will enter hibernate mode.${RESET}"
	echo "${BOLD}This is normal. Please wake up the system after it hibernates.${RESET}"
	echo "${BOLD}${RED}*** WARNING ***${RESET}"
	echo ""
	read -n 1 -p "Please press ${BOLD}${BLUE}[1]${RESET} ${BOLD}or ${BLUE}[2]${RESET} ${BOLD}to skip....${RESET} " restartBool
	if [[ $restartBool == "1" ]]; then
		tput reset
		echo "UPDATE jobstats SET reboot = 'yes' WHERE uuid = '${UUID}'" | uit-tss-db
		echo -n mem > /sys/power/state
		tput reset
	elif [[ $restartBool == "2" ]]; then
		tput reset
		echo "${BOLD}${RED}*** WARNING ***${RESET}"
		echo "${BOLD}It is dangerous to skip this step.${RESET}"
		echo "${BOLD}${RED}*** WARNING ***${RESET}"
		echo ""
		read -p "Press ${BOLD}${BLUE}Enter${RESET}${BOLD} to NOT reset (DANGEROUS)....${RESET} "
		tput reset
	else
		powerWarning
	fi
}



function appSelect {
	exitMessage
	echo -n "Would you like to ${BOLD}erase and clone ${BLUE}[1]${RESET}, ${BOLD}only erase (advanced) ${BLUE}[2]${RESET}"
	echo ", or ${BOLD}only clone ${BLUE}[3]${RESET}?"
	read -n 1 -p "${BOLD}Please enter ${BLUE}[1-3]${RESET}${BOLD}: ${RESET}" APPSELECT
	if [[ $APPSELECT == "1" ]]; then
		APPSELECT="EC"
		ACTION="erase and clone"
		echo "UPDATE jobstats SET action = '${ACTION}' WHERE uuid = '${UUID}'" | uit-tss-db
		powerWarning
	elif [[ $APPSELECT == "2" ]]; then
		APPSELECT="E"
		ACTION="erase"
		echo "UPDATE jobstats SET action = '${ACTION}' WHERE uuid = '${UUID}'" | uit-tss-db
		powerWarning
	elif [[ $APPSELECT == "3" ]]; then
		APPSELECT="C"
		ACTION="clone"
		echo "UPDATE jobstats SET action = '${ACTION}' WHERE uuid = '${UUID}'" | uit-tss-db
	else
		echo ""
		echo "${BOLD}${RED}Please enter a valid number [1-3].${RESET}"
		sleep 0.5
		appSelect
	fi
}



function basicEraseMode_Shred {
	shredMode='autodetect'
	RMODE='Autodetect'
	if [[ $shredMode == 'autodetect' ]]; then
		if [[ $CLIENTDISK =~ $SSD_REGEX ]]; then
			zeroQuick="1"
			shredMode='zero'
			RMODE='Zero Mode'
		elif [[ $CLIENTDISK =~ $NVME_REGEX ]]; then
			shredMode='nist'
			RMODE='NIST 800-88r1 Mode'
		else
			shredMode='zero'
			RMODE='Zero Mode'
		fi
	fi
	echo "UPDATE jobstats SET erase_mode = '${RMODE}' WHERE uuid = '${UUID}'" | uit-tss-db
}



function advEraseMode_Shred {
	tput reset
	echo ""
	echo "Please choose an erase mode: "
	echo ""

	echo ""
	echo "${BOLD}${BLUE}[1]${RESET} ${BOLD}Autodetect${RESET} (Default)
	-NIST 800-88r1 or Zero Mode depending on drive
	-Best trade off between security and speed"

	echo ""
	echo "${BOLD}${BLUE}[2]${RESET} ${BOLD}NIST 800-88r1${RESET}
	-Fastest for NVME
	-Secure Erase
	-Verification"

	echo ""
	echo "${BOLD}${BLUE}[3]${RESET} ${BOLD}Zero Mode + Quick Verify${RESET}
	-One pass of zeroes
	-Quick verification step"
	
	echo ""
	echo "${BOLD}${BLUE}[4]${RESET} ${BOLD}DOD 5220.22-M/NCSC-TG-025/AFSSI-5020/HMG IS5${RESET}
	-Writes a pass of zeroes, then ones, then a random bit
	-3 passes, 3 verifications"

	echo ""
	echo "${BOLD}${BLUE}[5]${RESET} ${BOLD}RCMP TSSIT OPS-II/VSITR${RESET}
	-Alternates passes between 0's and 1's 6 times
	-Writes random bit, verifies random bit"

	echo ""
	echo "${BOLD}${BLUE}[6]${RESET} ${BOLD}Schneier${RESET}
	-A pass of 1's then a pass of 0's
	-Five passes of a random stream of characters"

	echo ""
	echo "${BOLD}${BLUE}[7]${RESET} ${BOLD}Gutmann${RESET}
	-Four random character passes
	-27 predefined pattern passes
	-Four random character passes"
	
	echo ""
	echo "${BOLD}${BLUE}[8]${RESET} ${BOLD}Verify Only${RESET}
	-Does not write data
	-Different levels of verification
	-Chooses a character to verify"

	echo ""
	echo "${BOLD}${BLUE}[9]${RESET} ${BOLD}Unlock${RESET}
	-Unlocks disk previously locked by this program"

	echo ""
	read -n1 -p "${BOLD}Choose ${BLUE}[0-9]${RESET}${BOLD}:${RESET} " MODESELECT
	echo ""

	case $MODESELECT in
	1)
	shredMode='autodetect'
	RMODE='Autodetect'
	basicEraseMode_Shred
	;;
	2)
	shredMode='nist'
	RMODE='NIST 800-88r1 Mode'
	;;
	3)
	shredMode='zero'
	RMODE='Zero Mode'
	;;
	4)
	shredMode='dod'
	RMODE='DOD 5220.22-M/NCSC-TG-025/AFSSI-5020/HMG IS5 Mode'
	;;
	5)
	shredMode='rcmp'
	RMODE='RCMP TSSIT OPS-II/VSITR Mode'
	;;
	6)
	shredMode='schneier'
	RMODE='Schneier Mode'
	;;
	7)
	shredMode='gutmann'
	RMODE='Gutmann Mode'
	;;
	8)
	shredMode='verify'
	RMODE='Verify Mode'
	;;
	9)
	shredMode='unlock'
	RMODE='Unlock Mode'
	;;
	*)
	modeselect
	;;
	esac

	echo "UPDATE jobstats SET erase_mode = '${RMODE}' WHERE uuid = '${UUID}'" | uit-tss-db
}



function diskSelect {
	DISKNAMES=$(lsblk --nodeps --noheadings -o NAME --exclude 1,2,7,11)
	DISKSIZES=$(lsblk --nodeps --noheadings -o NAME,SIZE --exclude 1,2,7,11)
	CLIENTDISK=""
	diskNums="0"
	local DISKCONF=""
	local a="0"
	local n="0"
	local DISKARR=()
	exitMessage

	for i in ${DISKNAMES}; do
		diskNums=$(( diskNums + 1 ))
		DISKARR+=( "$i" )
	done

	if [[ $diskNums == "1" ]]; then
		for i in ${!DISKARR[@]}; do
			CLIENTDISK=${DISKARR[$i]}
		done
		echo "The disk ${BOLD}${CLIENTDISK}${RESET} has been automatically selected because it is the only detected disk."
		read -n 1 -p "Press ${BOLD}${BLUE}[1]${RESET} to confirm" DISKCONF
		if [[ $DISKCONF != "1" ]]; then
			echo "${BOLD}${RED}Reselecting disk.${RESET}"
			diskSelect
		fi
	else
		echo "Which disk do you want to ${BOLD}${ACTION}${RESET}?"
		while read -r line; do
			a=$(( $a + 1 ))
			echo "${BOLD}${BLUE}[${a}]${RESET} $line"
		done < <(echo "${BOLD}${DISKSIZES}${RESET}")
		echo ""
		read -n 1 -p "Select a disk ${BOLD}${BLUE}[1-$a]${RESET}: " CLIENTDISK
		for i in ${!DISKARR[@]}; do
			n=$(( $n + 1 ))
			if [[ $n == $CLIENTDISK ]]; then
				CLIENTDISK=${DISKARR[$i]}
			fi
		done
		echo ""
		echo ""
	fi
	
	if [[ $CLIENTDISK =~ ${NVME_REGEX} || $CLIENTDISK =~ ${SSD_REGEX} ]]; then
		echo "UPDATE jobstats SET disk = '${CLIENTDISK}' WHERE uuid = '${UUID}'" | uit-tss-db &
	else
	    echo ""
	    echo "${BOLD}${RED}Invalid selection.${RESET}"
		sleep 0.5
	    diskSelect
	fi	
}



function randBit_Shred {
	RANDBIT=$(cat /dev/urandom | xxd -plain | head -1 | cut -c 1)
}



function randPattern_Shred {
	RANDPATTERN=$(cat /dev/urandom | xxd -plain | head -1 | cut -c 8)
}



function writeDisk_Shred {
	SECTIONS='1000'
	DIVPERSEC='2'
	BS='1M'
	DISKSIZEMB=$(( $(blockdev --getsize64 /dev/${CLIENTDISK}) / 1000000 ))
	DISKSIZEGB=$(( $(blockdev --getsize64 /dev/${CLIENTDISK}) / 1000000 / 1000 ))
	echo "UPDATE jobstats SET disksizegb = '${DISKSIZEGB}' WHERE uuid = '${UUID}'" | uit-tss-db
	SECTIONSIZEMB=$(( ${DISKSIZEMB} / ${SECTIONS} ))
	COUNT=$(( ${SECTIONSIZEMB} / 100 * ${PCNTOFSECTOR} / 2 ))
	PROCFAIL='0'
	local a='0'
	local i='0'

	if [[ -z $CHAR ]]; then
		CHAR='0'
	fi

	if [[ -z $WMODE ]]; then
		WMODE='zero'
	fi

	if [[ -z $PCNTOFSECTOR ]]; then
		PCNTOFSECTOR='100'
	fi
	
	if [[ "$WMODE" == 'zero' ]]; then
		SOURCE='cat /dev/zero'
		BITS='null bits'
	fi

	if [[ "$WMODE" == 'random' ]]; then
		SOURCE='cat /dev/urandom'
		BITS='random bits'
	fi

	if [[ "$WMODE" == 'randBit_Shred' ]]; then
		randBit_Shred
		SOURCE="yes \"${RANDBIT}\""
		BITS="a random bit (${RANDBIT})"
	fi

	if [[ "$WMODE" == 'randPattern_Shred' ]]; then
		randPattern_Shred
		SOURCE="yes \"${RANDPATTERN}\""
		BITS="a random bit (${RANDPATTERN})"
	fi

	if [[ "$WMODE" == 'char' ]]; then
		SOURCE="yes \"${CHAR}\""
		BITS="\"${CHAR}\""
	fi

	echo "Filling ${PCNTOFSECTOR}% of ${CLIENTDISK} with a stream of ${BITS}...."
	echo "UPDATE jobstats SET erase_diskpercent = '${PCNTOFSECTOR}' WHERE uuid = '${UUID}'" | uit-tss-db

	if [[ $PCNTOFSECTOR == '100' ]]; then
		${SOURCE} | (pv > /dev/${CLIENTDISK})
		return 0
	fi
	
	while [[ $i -le $SECTIONS ]]; do

		echo -e "Writing to section ${i}/${SECTIONS}"
		tput cuu1

		COUNT1=$(shuf -i 1-${COUNT} -n 1)
		SKIP1=$(( $(shuf -i 1-$(( ${SECTIONSIZEMB} / ${DIVPERSEC} )) -n 1) + ${a} / 2 ))
    	${SOURCE} | dd bs=${BS} count=${COUNT1} seek=${SKIP1} of=/dev/${CLIENTDISK} iflag=fullblock status=none 2>/dev/null

		COUNT2=$(shuf -i 1-${COUNT} -n 1)
   		SKIP2=$(( $(shuf -i 1-$(( ${SECTIONSIZEMB} + ${SECTIONSIZEMB} - ${SECTIONSIZEMB} / ${DIVPERSEC} )) -n 1) + ${a} ))
    	${SOURCE} | dd bs=${BS} count=${COUNT2} seek=${SKIP2} of=/dev/${CLIENTDISK} iflag=fullblock status=none 2>/dev/null

		i=$(( ${i} + 1 ))
		a=$(( ${a} + ${SECTIONSIZEMB} ))

	done

	echo ""
	echo "Completely filling the first sector...."
    ${SOURCE} | dd bs=${BS} count=${SECTIONSIZEMB} seek=0 of=/dev/${CLIENTDISK} iflag=fullblock status=none 2>/dev/null
	echo "Completely filling the last sector...."
	${SOURCE} | dd bs=${BS} count=${SECTIONSIZEMB} seek=$(( ${DISKSIZEMB} - ${SECTIONSIZEMB} )) of=/dev/${CLIENTDISK} \
		iflag=fullblock status=none 2>/dev/null

	if [[ $PROCFAIL == '0' ]]; then
		echo "Success! ${PCNTOFSECTOR}% of ${CLIENTDISK} has been overwritten."
		return 0
		else
		echo "${BOLD}${RED}Write failed.${RESET}"
		return 1
	fi
}



function vrfyDisk_Shred {
	
	if [[ -z $SECTIONS ]]; then
		SECTIONS='1000'
	fi

	if [[ -z $PCNTOFSECTOR ]]; then
		PCNTOFSECTOR='100'
	fi

	DIVPERSEC='2'
	BS='1M'
	DISKSIZEMB=$(( $(blockdev --getsize64 /dev/${CLIENTDISK}) / 1000000 ))
	DISKSIZEGB=$(( $(blockdev --getsize64 /dev/${CLIENTDISK}) / 1000000 / 1000 ))
	SECTIONSIZEMB=$(( ${DISKSIZEMB} / ${SECTIONS} ))
	COUNT=$(( ${SECTIONSIZEMB} / 100 * ${PCNTOFSECTOR} / 2 ))
	PROCFAIL='0'
	local a='0'
	local i='0'

	if [[ -z $CHAR ]]; then
		CHAR='0'
	fi

	echo "Looking for non-${CHAR}'s on ${CLIENTDISK}...."

	if [[ $PCNTOFSECTOR == '100' ]]; then
		FULLVRFY=$(pv /dev/${CLIENTDISK} | grep -oP -m 1 "[^${CHAR}]" | head -1)
		if [[ -z $FULLVRFY ]]; then
        	echo "${BOLD}The drive ${CLIENTDISK} is completely and securely wiped.${RESET}"
			PROCFAIL='0'
		else
            PROCFAIL='1'
            echo "${BOLD}${RED}Bad bits found on device${RESET}${BOLD} ${CLIENTDISK}${RESET}"
			echo ""
        	read -p "${BOLD}Press ${BLUE}Enter ${RESET}${BOLD}to continue.${RESSET}"
			return 1
		fi
	fi
	
	while [[ $i -le $SECTIONS && $PROCFAIL == '0' ]]; do

		echo "Verifying section ${i}/${SECTIONS}"
		tput cuu1

		COUNT1=$(shuf -i 1-${COUNT} -n 1)
		SKIP1=$(( $(shuf -i 1-$(( ${SECTIONSIZEMB} / ${DIVPERSEC} )) -n 1) + ${a} / 2 ))
    	if [[ $(dd if=/dev/${CLIENTDISK} bs=${BS} count=${COUNT1} skip=${SKIP1} iflag=fullblock status=none 2>/dev/null \
        	| grep --quiet -oP -m 1 [^${CHAR}]; echo $?) == '0' ]]; then
            	PROCFAIL='1'
            	echo "${BOLD}${RED}Bad bits found on device${RESET}${BOLD} ${CLIENTDISK}${RESET}"
				echo ""
        		read -p "${BOLD}Press ${BLUE}Enter ${RESET}${BOLD}to continue.${RESSET}"
				return 1
    	fi

		COUNT2=$(shuf -i 1-${COUNT} -n 1)
    	SKIP2=$(( $(shuf -i 1-$(( ${SECTIONSIZEMB} + ${SECTIONSIZEMB} - ${SECTIONSIZEMB} / ${DIVPERSEC} )) -n 1) + ${a} ))
    	if [[ $(dd if=/dev/${CLIENTDISK} bs=${BS} count=${COUNT2} skip=${SKIP2} iflag=fullblock status=none 2>/dev/null \
        	| grep --quiet -oP -m 1 [^${CHAR}]; echo $?) == '0' ]]; then
            	PROCFAIL='1'
            	echo "${BOLD}${RED}Bad bits found on device${RESET}${BOLD} ${CLIENTDISK}${RESET}"
				echo ""
        		read -p "${BOLD}Press ${BLUE}Enter ${RESET}${BOLD}to continue.${RESSET}"
				return 1
    	fi

		i=$(( ${i} + 1 ))
		a=$(( ${a} + ${SECTIONSIZEMB} ))

	done

	echo ""
	echo "Verifing the first sector of the disk...."
	if [[ $(dd if=/dev/${CLIENTDISK} count=${SECTIONSIZEMB} skip=0 iflag=fullblock status=none 2>/dev/null \
        | grep --quiet -oP -m 1 [^${CHAR}]; echo $?) == '0' && $PROCFAIL == '0' ]]; then
            	PROCFAIL='1'
            	echo "${BOLD}${RED}Bad bits found on device${RESET}${BOLD} ${CLIENTDISK}${RESET}"
				echo ""
        		read -p "${BOLD}Press ${BLUE}Enter ${RESET}${BOLD}to continue.${RESSET}"
				return 1
    fi
	echo "Verifing the last sector of the disk...."
    if [[ $(dd if=/dev/${CLIENTDISK} count=${SECTIONSIZEMB} skip=$(( ${DISKSIZEMB} - ${SECTIONSIZEMB} )) \
		iflag=fullblock status=none 2>/dev/null \
        | grep --quiet -oP -m 1 [^${CHAR}]; echo $?) == '0' && $PROCFAIL == '0' ]]; then
            	PROCFAIL='1'
            	echo "${BOLD}${RED}Bad bits found on device${RESET}${BOLD} ${CLIENTDISK}${RESET}"
				echo ""
        		read -p "${BOLD}Press ${BLUE}Enter ${RESET}${BOLD}to continue.${RESSET}"
				return 1
    fi

    echo "${PCNTOFSECTOR}% of ${CLIENTDISK} has been verified."
	if [[ $PROCFAIL == '0' ]]; then
		echo "Test passed successfully!"
		return 0
		else
		echo "Test failed."
		return 1
	fi
}



function secErase_Shred {
	if [[ $CLIENTDISK =~ $SSD_REGEX ]]; then 
		echo "Using Secure Erase on ${CLIENTDISK}. This can take a while, please keep the device powered on...."
		hdparm --user-master u --security-set-pass UHouston /dev/${CLIENTDISK} &>/dev/null
		hdparm --user-master u --security-erase UHouston /dev/${CLIENTDISK} &>/dev/null
	elif [[ $CLIENTDISK =~ $NVME_REGEX ]]; then
		echo "Using Secure Erase on ${CLIENTDISK:0:-2}. This can take a while, please keep the device powered on...."
		nvme format /dev/${CLIENTDISK:0:-2} --ses=1 --namespace-id=1 &>/dev/null
		nvme format /dev/${CLIENTDISK:0:-2} --ses=2 --namespace-id=1 &>/dev/null
	elif [[ $CLIENTDISK =~ $SCSI_REGEX ]]; then
		echo "No compatible SATA or NVME drive is selected. Can't use Secure Erase on ${CLIENTDISK}. Continuing...."
	else
		echo "No compatible SATA or NVME drive is selected. Can't use Secure Erase on ${CLIENTDISK}. Continuing...."
	fi
}



function secUnlock_Shred {
	if [[ $CLIENTDISK =~ $SSD_REGEX ]]; then 
		echo "Unlocking ${CLIENTDISK}, please keep the device powered on...."
		hdparm --user-master u --security-unlock UHouston /dev/${CLIENTDISK} &>/dev/null
		hdparm --user-master u --security-disable UHouston /dev/${CLIENTDISK} &>/dev/null
		echo "${CLIENTDISK} is successfully unlocked."
	elif [[ $CLIENTDISK =~ $NVME_REGEX ]]; then
		echo "Only SATA drives can be unlocked. Failed to unlock ${CLIENTDISK:0:-2}. Continuing...."
	elif [[ $CLIENTDISK =~ $SCSI_REGEX ]]; then
		echo "No compatible SATA or NVME drive is selected. Can't unlock ${CLIENTDISK}. Continuing...."
	else
		echo "No compatible SATA or NVME drive is selected. Can't unlock ${CLIENTDISK}. Continuing...."
	fi
}



function nistMode_Shred {
	clear
	echo ""
	echo "${BOLD}UIT-TSS-TOOLBOX running in ${BLUE}${RMODE}.${RESET}"
	echo ""

	echo ""
	echo "${BOLD}Step [1/3]: ${RESET}"
	PCNTOFSECTOR='25'
	WMODE='random'
	writeDisk_Shred
	
	echo ""
	echo "${BOLD}Step [2/3]: ${RESET}"
	secErase_Shred
	secUnlock_Shred
	
	echo ""
	echo "${BOLD}Step [3/3]: ${RESET}"
	PCNTOFSECTOR='50'
	CHAR='0'
	vrfyDisk_Shred

	if [[ $PROCFAIL == '1' ]]; then
		echo ""
		echo ""
		echo "Step [1/2]: "
		PCNTOFSECTOR='100'
		WMODE='zero'
		writeDisk_Shred

		echo ""
		echo "Step [2/2]: "
		PCNTOFSECTOR='100'
		CHAR='0'
		vrfyDisk_Shred
	fi
}



function zeroMode_Shred {
	clear
	echo ""
	echo "UIT-TSS-TOOLBOX running in ${RMODE}."
	echo ""

	echo ""
	echo "Step [1/2]: "
	echo ""
	WMODE='zero'
	if [[ $zeroQuick = "1" ]]; then
		PCNTOFSECTOR='25'
	else
		PCNTOFSECTOR='100'
	fi
	writeDisk_Shred
	
	if [[ $zeroQuick != "1" ]]; then
		echo ""
		echo "Step: [2/2]: "
		PCNTOFSECTOR='10'
		CHAR='0'
		vrfyDisk_Shred
	fi
}



function dodMode_Shred {
	
	clear
	echo ""
	echo "UIT-TSS-TOOLBOX running in ${RMODE}."
	echo ""

	echo ""
	echo "Step [1/6]: "
	echo ""
	WMODE='zero'
	PCNTOFSECTOR='100'
	writeDisk_Shred
	
	echo ""
	echo "Step [2/6]: "
	echo ""
	PCNTOFSECTOR='100'
	CHAR='0'
	vrfyDisk_Shred

	echo ""
	echo "Step [3/6]: "
	echo ""
	WMODE='char'
	PCNTOFSECTOR='100'
	CHAR='1'
	writeDisk_Shred
	
	echo ""
	echo "Step [4/6]: "
	echo ""
	PCNTOFSECTOR='100'
	CHAR='1'
	vrfyDisk_Shred

	echo ""
	echo "Step [5/6]: "
	echo ""
	WMODE='randBit_Shred'
	PCNTOFSECTOR='100'
	writeDisk_Shred
	
	echo ""
	echo "Step [6/6]: "
	echo ""
	PCNTOFSECTOR='100'
	CHAR=${RANDBIT}
	vrfyDisk_Shred
}



function rcmpMode_Shred {

	clear
	echo ""
	echo "UIT-TSS-TOOLBOX running in ${RMODE}."
	echo ""

	echo ""
	echo "Step [1/8]: "
	WMODE='zero'
	PCNTOFSECTOR='100'
	writeDisk_Shred

	echo ""
	echo "Step [2/8]: "
	WMODE='char'
	PCNTOFSECTOR='100'
	CHAR='1'
	writeDisk_Shred

	echo ""
	echo "Step [3/8]: "
	WMODE='zero'
	PCNTOFSECTOR='100'
	writeDisk_Shred
	
	echo ""
	echo "Step [4/8]: "
	WMODE='char'
	PCNTOFSECTOR='100'
	CHAR='1'
	writeDisk_Shred

	echo ""
	echo "Step [5/8]: "
	WMODE='zero'
	PCNTOFSECTOR='100'
	writeDisk_Shred

	echo ""
	echo "Step [6/8]: "
	WMODE='char'
	PCNTOFSECTOR='100'
	CHAR='1'
	writeDisk_Shred

	echo ""
	echo "Step [7/8]: "
	echo ""
	WMODE='randBit_Shred'
	PCNTOFSECTOR='100'
	writeDisk_Shred
	
	echo ""
	echo "Step [8/8]: "
	echo ""
	PCNTOFSECTOR='100'
	CHAR="${RANDBIT}"
	vrfyDisk_Shred

}



function schneierMode_Shred {

	clear
	echo ""
	echo "UIT-TSS-TOOLBOX running in ${RMODE}."
	echo ""

	echo ""
	echo "Step [1/7]: "
	WMODE='char'
	PCNTOFSECTOR='100'
	CHAR='1'
	writeDisk_Shred

	echo ""
	echo "Step [2/7]: "
	WMODE='zero'
	PCNTOFSECTOR='100'
	writeDisk_Shred

	echo ""
	echo "Step [3/7]: "
	WMODE='rand'
	PCNTOFSECTOR='100'
	writeDisk_Shred

	echo ""
	echo "Step [4/7]: "
	WMODE='rand'
	PCNTOFSECTOR='100'
	writeDisk_Shred

	echo ""
	echo "Step [5/7]: "
	WMODE='rand'
	PCNTOFSECTOR='100'
	writeDisk_Shred

	echo ""
	echo "Step [6/7]: "
	WMODE='rand'
	PCNTOFSECTOR='100'
	writeDisk_Shred

	echo ""
	echo "Step [7/7]: "
	WMODE='rand'
	PCNTOFSECTOR='100'
	writeDisk_Shred

}



function gutmann {
	COUNT='0'
	GUTMANNARRAY=(01010101 10101010 10010010 01001001 00100100 00000000 00010001 00100010)
	GUTMANNARRAY+=(00110011 01000100 01010101 01100110 01110111 10001000 10011001 10101010)
	GUTMANNARRAY+=(10111011 11001100 11011101 11101110 11111111 10010010 01001001 00100100)
	GUTMANNARRAY+=(01101101 10110110 11011011)

	clear
	echo ""
	echo "UIT-TSS-TOOLBOX running in ${RMODE}."
	echo ""

	
	while [[ $COUNT -le 35 ]]; do 

		if [[ $COUNT -le 4 ]]; then
			echo ""
			echo "[${COUNT}/35] Writing \"${RANDOMPATTERN}\" to ${CLIENTDISK}"
			WMODE='randPattern_Shred'
			PCNTOFSECTOR='100'
			writeDisk_Shred
		fi

		if [[ $COUNT -le 31 && $COUNT -gt 4 ]]; then
			WMODE='char'
			PCNTOFSECTOR='100'
			for i in ${GUTMANNARRAY[@]}; do
				RANDNUM=$(shuf -i 1-26 -n 1)
				CHAR=${GUTMANARRAY[$RANDNUM]}
			done
			echo "[${COUNT}/35] Writing pattern ${CHAR} to ${CLIENTDISK}"
			writeDisk_Shred
		fi

		if [[ $COUNT -gt 31 ]]; then
			echo ""
			echo "[${COUNT}/35] Writing \"${RANDOMPATTERN}\" to ${CLIENTDISK}"
			WMODE='randPattern_Shred'
			PCNTOFSECTOR='100'
			writeDisk_Shred
		fi

	done

	echo ""
	echo ""
	echo "The drive ${CLIENTDISK} is erased using Gutmann's method."
}



function verifyMode_Shred {
	clear
	echo ""
	echo "UIT-TSS-TOOLBOX running in ${RMODE}."
	echo ""
	
	echo ""
	echo "Select the desired level of verification."
	echo ""

	echo ""
	echo "1 Full verification (Default)
	-Longest, verifies every bit on the disk"

	echo ""
	echo "2 Moderate verification
	-10000 divisions, 75% verified"

	echo ""
	echo "3 Medium verification
	-5000 divisions, 50% verified"

	echo ""
	echo "4 Fast verification
	-2500 divisions, 25% verified"

	echo ""
	echo "5 Very fast verification
	-1000 divisions, 10% verified"

	echo ""
	read -n 1 -p "Please select [1-5]: " VRFYSELECT
	echo ""

	case $VRFYSELECT in
	1)
	VRFYMODE='full'
	;;
	2)
	VRFYMODE='moderate'
	;;
	3)
	VRFYMODE='medium'
	;;
	4)
	VRFYMODE='fast'
	;;
	5)
	VRFYMODE='vfast'
	;;
	*)
	echo ""
	echo ""
	echo "Incorrect input selected, please try again"
	sleep 1
	verifyMode_Shred
	;;
	esac

	echo ""
	echo "Mode is ${VRFYMODE}"
	echo ""
	read -p "Which character/pattern would you like to verify?: " CHAR
	echo ""

	if [[ $VRFYMODE == 'full' ]]; then
		PCNTOFSECTOR='100'
		CHAR=${CHAR}
		vrfyDisk_Shred
	fi

	if [[ $VRFYMODE == 'moderate' ]]; then
		SECTIONS='10000'
		PCNTOFSECTOR='75'
		CHAR=${CHAR}
		vrfyDisk_Shred
	fi

	if [[ $VRFYMODE == 'medium' ]]; then
		SECTIONS='5000'
		PCNTOFSECTOR='50'
		CHAR=${CHAR}
		vrfyDisk_Shred
	fi

	if [[ $VRFYMODE == 'fast' ]]; then
		SECTIONS='2500'
		PCNTOFSECTOR='25'
		CHAR=${CHAR}
		vrfyDisk_Shred
	fi

	if [[ $VRFYMODE == 'vfast' ]]; then
		PCNTOFSECTOR='10'
		CHAR=${CHAR}
		vrfyDisk_Shred
	fi
}



function unlockMode_Shred {
	clear
	echo ""
	echo "UIT-TSS-TOOLBOX running in ${RMODE}"
	echo ""
	
	secUnlock_Shred
}



function clientselect_Clone {
	exitMessage
	echo -n "Are you ${BOLD} restoring${RESET} (server -> client) ${BLUE}${BOLD}[1]${RESET} or "
	echo "${BOLD}saving${RESET} (client -> server) ${BLUE}${BOLD}[2]${RESET} an image?"
	read -n1 -p "Enter ${BOLD}${BLUE}[1-2]${RESET} " cloneMode
	echo ""
	echo ""
	case $cloneMode in
		1)
			cloneMode="restoredisk"
		;;
		2)
			cloneMode="savedisk"
		;;
		*)
			echo "${BOLD}${RED}Error - Invalid input${RESET}"
		;;
	esac

	exitMessage
	echo -n "Are you cloning ${BOLD}HP laptops ${BLUE}[1]${RESET}, "
	echo -n "${BOLD}Dell laptops ${BLUE}[2]${RESET}, "
	echo "or ${BOLD}Dell desktops ${BLUE}[3]${RESET}?"
	read -n1 -p "Enter ${BOLD}${BLUE}[1-3]${RESET} " CLIENTTYPE
	echo ""
	case $CLIENTTYPE in
	1)
	sambaPath='hp'
	cloneImgName='2023Spring-HP'
	echo "UPDATE jobstats SET clone_image = '${cloneImgName}' WHERE uuid = '${UUID}'" | uit-tss-db
	;;
	2)
	sambaPath='dell'
	cloneImgName='2023Spring-Dell'
	echo "UPDATE jobstats SET clone_image = '${cloneImgName}' WHERE uuid = '${UUID}'" | uit-tss-db
	;;
	3)
	sambaPath='desktops'
	cloneImgName='2022Fall-Win10Desktops'
	echo "UPDATE jobstats SET clone_image = '${cloneImgName}' WHERE uuid = '${UUID}'" | uit-tss-db
	;;
	*)
	clientselect
	;;
	esac
}



function confirm_Clone {
	echo ""
	echo ""
	echo ""
	echo "------------------------------"
	echo ""
	echo "Default settings:"
	echo "Server type: Samba"
	echo "User: ${USER}"
	echo "Password: ${PASS}"
	echo "Hostname prefix: ${HOSTNAME}"
	echo ""
	echo ""
	echo "Custom settings:"
	echo "Mode is: ${cloneMode}"
	echo "Server is: ${SERVER}/${SERVERDNS}"
	echo "Samba path is: //${SERVERDNS}/${SMBPATH}"
	echo "Image name is: ${IMAGENAME}"
	echo "Client disk: ${CLIENTDISK}"
	echo ""
		if [[ $cloneMode == "savedisk" ]]; then
		echo "Saving an image will overwrite the previous image stored on the server. \
Please make a backup if necessary."
		fi
		if [[ $cloneMode == "restoredisk" ]]; then
		echo "Restoring an image will overwrite the client's hard drive. \
Please make a backup if necessary."
		fi
	echo ""
	read -p "Press Enter to continue or CTRL + C to exit...."
	clear
}



function execute_Clone {
	SECONDS=0
	start_time=$SECONDS
	sambaUser="cameron"
	sambaPassword='UHouston!'
	sambaServer="10.0.0.1"
	sambaDNS="mickey.uit"
	echo "UPDATE jobstats SET clone_sambauser = '${sambaUser}' WHERE uuid = '${UUID}'" | uit-tss-db
	echo "UPDATE jobstats SET clone_server = '${sambaDNS}/${sambaServer}' WHERE uuid = '${UUID}'" | uit-tss-db
	umount /home/partimag &>/dev/null
	mkdir -p /home/partimag
	sshfs -o allow_other,default_permissions ${sambaUser}@${sambaServer}:/home/${sambaPath} /home/partimag
	#mount -t cifs -o user=${sambaUser} -o password=${sambaPassword} //${sambaServer}/${sambaPath} /home/partimag
	if [[ $cloneMode == "restoredisk" ]]; then
		tput reset
		info
		sleep 1
		/usr/sbin/ocs-sr --language en_US.UTF-8 --postaction command --user-mode beginner \
			-k1 --skip-check-restorable-r ${cloneMode} ${cloneImgName} ${CLIENTDISK}
	fi
	if [[ $cloneMode == "savedisk" ]]; then
		tput reset
		info
		sleep 1
		/usr/sbin/ocs-sr --language en_US.UTF-8 --postaction command --user-mode beginner \
			--skip-enc-ocs-img --skip-fsck-src-part --use-partclone -z9 ${cloneMode} ${cloneImgName} ${CLIENTDISK}
	fi
	cloneElapsed=$(( SECONDS - start_time))
	echo "UPDATE jobstats SET clone_time = '${cloneElapsed}' WHERE uuid = '${UUID}'" | uit-tss-db
	return
}



function execute_Shred {
	if [[ $APPSELECT == "EC" || $APPSELECT == "E" ]]; then
		SECONDS=0
		start_time=$SECONDS
		if [[ $shredMode == 'nist' ]]; then
			nistMode_Shred
		fi

		if [[ $shredMode == 'zero' ]]; then
			zeroMode_Shred
		fi

		if [[ $shredMode == 'dod' ]]; then
			dodMode_Shred
		fi

		if [[ $shredMode == 'rcmp' ]]; then
			rcmpMode_Shred
		fi
	
		if [[ $shredMode == 'gutmann' ]]; then
			gutmann
		fi
	
		if [[ $shredMode == 'schneier' ]]; then
			schneierMode_Shred
		fi
	
		if [[ $shredMode == 'verify' ]]; then
			verifyMode_Shred
		fi

		if [[ $shredMode == 'unlock' ]]; then
			unlockMode_Shred
		fi
		shredElapsed=$(( SECONDS - start_time ))
		echo "UPDATE jobstats SET erase_time = '${shredElapsed}' WHERE uuid = '${UUID}'" | uit-tss-db
	fi
	return
}



function execute {

	if [[ $cloneMode == "savedisk" && ($APPSELECT == "E" || $APPSELECT == "EC") ]]; then
		echo "${RED}Cannot erase device and save its image.${RESET}"
		read -p "Please press enter to restart UIT-TSS-TOOLBOX."
		exit 1
	fi

	if [[ $APPSELECT == "EC" ]]; then
		if [[ -z $cloneMode ]]; then
			clientselect_Clone
		fi
		basicEraseMode_Shred
		execute_Shred
		execute_Clone
	elif [[ $APPSELECT == "E" ]]; then
		if [[ -z $shredMode ]]; then
			advEraseMode_Shred
		fi
		basicEraseMode_Shred
		execute_Shred
	elif [[ $APPSELECT == "C" ]]; then
		if [[ -z $cloneMode ]]; then
			clientselect_Clone
		fi
		execute_Clone
	else
		echo "${RED}Error - Invalid application selected.${RESET}"
	fi

}


function totaltime {
	totalElapsed=$(echo $(( (shredElapsed + cloneElapsed) / 60 )) minutes)
	echo "UPDATE jobstats SET all_time = '${totalElapsed}' WHERE uuid = '${UUID}'" | uit-tss-db
}

function enterTag {
	local regex="^[[:digit:]]{6}$"
	tput reset
	echo ""
	read -p "${BOLD}Process has finished. Please enter the ${BLUE}tag number${RESET}${BOLD} followed by ${BLUE}Enter${RESET}${BOLD}:${RESET} " tagNum
	if [[ $tagNum =~ $regex ]]; then
		echo "UPDATE jobstats SET tagnumber = '${tagNum}' WHERE uuid = '${UUID}'" | uit-tss-db
		echo "${tagNum}" > /root/tagnumber
	else
		echo "${BOLD}${RED}ERROR: Please enter a 6-digit tag number${RESET}"
		sleep 0.5
		terminate
	fi
}

function terminate {
	tput reset
	totaltime
	/usr/bin/play /root/oven.mp3 &> /dev/null
	enterTag

	echo ""
	imgupdate=$(mysql --user="laptops" --password="UHouston!" --database="laptopDB" --host="10.0.0.1" -s -N \
	--execute="SELECT last_image_update FROM serverstats WHERE date = '${DATE}';")

	if [[ $cloneMode == "restoredisk" && ($APPSELECT == "C" || $APPSELECT == "EC") ]]; then
		echo "UPDATE jobstats SET clone_imageupdate = '${imgupdate}' WHERE uuid = '${UUID}'" | uit-tss-db

		if [[ $cloneMode == "restoredisk" && $APPSELECT == "EC" ]]; then
			terminateAction="erased and cloned"
		fi

		if [[ $cloneMode == "restoredisk" && $APPSELECT == "C" ]]; then
			terminateAction="cloned"
		fi

		exitMessage=$(echo "Tag#: ${tagNum}"
		echo "MAC: ${etherAddr}"
		echo "Action: ${terminateAction}"
		echo "Server: \"${sambaDNS}\""
		echo "Image: \"${cloneImgName}\""
		echo "Image last updated: ${imgupdate}";
		#echo "Computers imaged/erased today: ${imageNumToday}"
		echo "Total time taken: ${totalElapsed}"
		#echo "Times ${tagNum} has been reimaged: ${totalCount}"
		)

		echo "UPDATE jobstats SET clone_completed = 'Yes' WHERE uuid = '${UUID}'" | uit-tss-db

		if [[ $APPSELECT == "EC" ]]; then
		echo "UPDATE jobstats SET erase_completed = 'Yes' WHERE uuid = '${UUID}'" | uit-tss-db
		fi
	fi
	
	if [[ $cloneMode == "savedisk" && $APPSELECT == "C" ]]; then
		imgupdate=$(date --iso)
		echo "UPDATE serverstats SET last_image_update = '${imgupdate}' WHERE date = '${DATE}'" | uit-tss-db

		exitMessage=$(echo "Updated image: \"${cloneImgName}\""
		echo "Server: \"${sambaDNS}\""
		echo "Total time taken: ${totalElapsed}"
		echo "Last updated on: ${imageUpdate}"
		#echo "Computers imaged/erased today: ${imageNumToday}"
		)

		echo "UPDATE jobstats SET clone_completed = 'Yes' WHERE uuid = '${UUID}'" | uit-tss-db
		echo "UPDATE jobstats SET clone_master = 'Yes' WHERE uuid = '${UUID}'" | uit-tss-db
	fi

	if [[ $APPSELECT == "E" ]]; then
		terminateAction="erased"

		exitMessage=$(echo "Tag#: ${tagNum}"
		echo "MAC: ${etherAddr}"
		echo "Action: ${terminateAction}"
		echo "Total time taken: ${totalElapsed}"
		)
		echo "UPDATE jobstats SET erase_completed = 'Yes' WHERE uuid = '${UUID}'" | uit-tss-db

		echo ""
		echo "${exitMessage}"
		echo ""
		if [[ $PROCFAIL == '1' ]]; then
			echo "${BOLD}${RED}Process failed - Bad bits found on device ${CLIENTDISK}!${RESET}"
		fi
		echo ""
		read -p "${BOLD}Process has finished. Press ${BLUE}Enter${RESET}${BOLD} to shutdown...${RESET}"
		poweroff
	fi

	echo ""
	/usr/sbin/uit-tss-sql-refresh-client	
	echo ""
	echo "${exitMessage}"
	echo ""
	read -p "${BOLD}Process has finished. Press ${BLUE}Enter${RESET}${BOLD} to reboot...${RESET}"
	reboot
}



function main {
	hardwareData
	intro
	if [[ $mainMenuOpt == "1" ]]; then
		APPSELECT="EC"
		ACTION="erase and clone"
			echo "UPDATE jobstats SET clone_image = '${tOneManufacturer}' WHERE uuid = '${UUID}'" | uit-tss-db
			echo "UPDATE jobstats SET action = '${ACTION}' WHERE uuid = '${UUID}'" | uit-tss-db
		CLIENTDISK='nvme0n1'
			echo "UPDATE jobstats SET disk = '${CLIENTDISK}' WHERE uuid = '${UUID}'" | uit-tss-db
		cloneMode="restoredisk"
			echo "UPDATE jobstats SET clone_mode = '${cloneMode}' WHERE uuid = '${UUID}'" | uit-tss-db
		sambaPath="hp"
		cloneImgName="2023Spring-HP"
			echo "UPDATE jobstats SET clone_image = '${cloneImgName}' WHERE uuid = '${UUID}'" | uit-tss-db
		shredMode="autodetect"
		RMODE="autodetect"
			echo "UPDATE jobstats SET erase_mode = '${RMODE}' WHERE uuid = '${UUID}'" | uit-tss-db
		sambaUser="cameron"
		sambaPassword="UHouston!"
		sambaServer="10.0.0.1"
		sambaDNS="mickey.uit"
			echo "UPDATE jobstats SET clone_sambauser = '${sambaUser}' WHERE uuid = '${UUID}'" | uit-tss-db
			echo "UPDATE jobstats SET clone_server = '${sambaDNS}/${sambaServer}' WHERE uuid = '${UUID}'" | uit-tss-db
		powerWarning
		execute
	elif [[ $mainMenuOpt == "2" ]]; then
		APPSELECT="EC"
		ACTION="erase and clone"
			echo "UPDATE jobstats SET clone_image = '${tOneManufacturer}' WHERE uuid = '${UUID}'" | uit-tss-db
			echo "UPDATE jobstats SET action = '${ACTION}' WHERE uuid = '${UUID}'" | uit-tss-db
		CLIENTDISK='nvme0n1'
			echo "UPDATE jobstats SET disk = '${CLIENTDISK}' WHERE uuid = '${UUID}'" | uit-tss-db
		cloneMode="restoredisk"
			echo "UPDATE jobstats SET clone_mode = '${cloneMode}' WHERE uuid = '${UUID}'" | uit-tss-db
		sambaPath="dell"
		cloneImgName="2023Spring-Dell"
			echo "UPDATE jobstats SET clone_image = '${cloneImgName}' WHERE uuid = '${UUID}'" | uit-tss-db
		shredMode="autodetect"
		RMODE="autodetect"
			echo "UPDATE jobstats SET erase_mode = '${RMODE}' WHERE uuid = '${UUID}'" | uit-tss-db
		sambaUser="cameron"
		sambaPassword="UHouston!"
		sambaServer="10.0.0.1"
		sambaDNS="mickey.uit"
			echo "UPDATE jobstats SET clone_sambauser = '${sambaUser}' WHERE uuid = '${UUID}'" | uit-tss-db
			echo "UPDATE jobstats SET clone_server = '${sambaDNS}/${sambaServer}' WHERE uuid = '${UUID}'" | uit-tss-db
		powerWarning
		execute
	elif [[ $mainMenuOpt == "3" ]]; then
		APPSELECT="EC"
		ACTION="erase and clone"
			echo "UPDATE jobstats SET clone_image = '${tOneManufacturer}' WHERE uuid = '${UUID}'" | uit-tss-db
			echo "UPDATE jobstats SET action = '${ACTION}' WHERE uuid = '${UUID}'" | uit-tss-db
		CLIENTDISK='sda'
			echo "UPDATE jobstats SET disk = '${CLIENTDISK}' WHERE uuid = '${UUID}'" | uit-tss-db
		cloneMode="restoredisk"
			echo "UPDATE jobstats SET clone_mode = '${cloneMode}' WHERE uuid = '${UUID}'" | uit-tss-db
		sambaPath="dell"
		cloneImgName="2023Spring-Dell"
			echo "UPDATE jobstats SET clone_image = '${cloneImgName}' WHERE uuid = '${UUID}'" | uit-tss-db
		shredMode="autodetect"
		RMODE="autodetect"
			echo "UPDATE jobstats SET erase_mode = '${RMODE}' WHERE uuid = '${UUID}'" | uit-tss-db
		sambaUser="cameron"
		sambaPassword="UHouston!"
		sambaServer="10.0.0.1"
		sambaDNS="mickey.uit"
			echo "UPDATE jobstats SET clone_sambauser = '${sambaUser}' WHERE uuid = '${UUID}'" | uit-tss-db
			echo "UPDATE jobstats SET clone_server = '${sambaDNS}/${sambaServer}' WHERE uuid = '${UUID}'" | uit-tss-db
		powerWarning
		execute
	elif [[ $mainMenuOpt == "4" ]]; then
		APPSELECT="E"
		ACTION="erase"
			echo "UPDATE jobstats SET action = '${ACTION}' WHERE uuid = '${UUID}'" | uit-tss-db
		CLIENTDISK='nvme0n1'
			echo "UPDATE jobstats SET disk = '${CLIENTDISK}' WHERE uuid = '${UUID}'" | uit-tss-db
		shredMode="autodetect"
		RMODE="autodetect"
			echo "UPDATE jobstats SET erase_mode = '${RMODE}' WHERE uuid = '${UUID}'" | uit-tss-db
		powerWarning
		execute
	elif [[ $mainMenuOpt == "5" ]]; then
		APPSELECT="E"
		ACTION="erase"
			echo "UPDATE jobstats SET action = '${ACTION}' WHERE uuid = '${UUID}'" | uit-tss-db
		CLIENTDISK='sda'
		echo "UPDATE jobstats SET disk = '${CLIENTDISK}' WHERE uuid = '${UUID}'" | uit-tss-db
		shredMode="autodetect"
		RMODE="autodetect"
			echo "UPDATE jobstats SET erase_mode = '${RMODE}' WHERE uuid = '${UUID}'" | uit-tss-db

		powerWarning
		execute
	elif [[ $mainMenuOpt == "6" ]]; then
		appSelect
		diskSelect
		execute
	elif [[ $mainMenuOpt == "0" ]]; then
		hardwareData
		enterTag
	else
		exit 1
	fi
	terminate
}

main